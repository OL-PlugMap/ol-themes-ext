{"version":3,"file":"Config.js","sources":["../src/Config.js"],"sourcesContent":["export function isConfig(config) {\n    return config && config.layers && config.layerGroups && config.layerCategories;\n}\n\nexport function convertLayer(oldValue) {\n\n    let newValue = {\n        key: \"\",\n        name: \"\",\n        opacity: 1,\n        config: {},\n    }\n\n    let targetKey = undefined;\n\n    if(oldValue.xyz)\n        targetKey = \"xyz\";\n\n    if(oldValue.esriFeature)\n        targetKey = \"esriFeature\";\n\n    if(oldValue.esriExport)\n        targetKey = \"esriExport\";\n\n    if(oldValue.mvt)\n        targetKey = \"mvt\";\n        \n    if(oldValue.staticVector)\n        targetKey = \"staticVector\";\n\n    if(oldValue.wms)\n        targetKey = \"wms\";\n\n    if(oldValue.wmts)\n        targetKey = \"wmts\";\n    \n    if(!targetKey)\n    {\n        console.log(\"Encountered an unknown config for layer\", oldValue);\n        return undefined;\n    }\n\n    newValue.key = oldValue.key;\n    newValue.name = oldValue.name;\n    newValue.opacity = oldValue.opacity;\n    newValue.config.type = targetKey;\n    newValue.config.value = {\n        endpoints: oldValue[targetKey].endpoints,\n        maxZoom: oldValue[targetKey].maxZoom,\n        minZoom: oldValue[targetKey].minZoom\n    }\n\n    if(targetKey === \"mvt\")\n    {\n        newValue.config.value.declutter = oldValue[targetKey].declutter;\n        let clusterSettings = {};\n        \n        if(oldValue[targetKey].cluster)\n        {\n            console.log(\"Found cluster settings\", oldValue[targetKey].cluster);\n            clusterSettings.enabled = true;\n            clusterSettings.distance = oldValue[targetKey].cluster.distance;\n            clusterSettings.minDistance = oldValue[targetKey].cluster.minDistance;\n\n            newValue.config.value.cluster = clusterSettings;\n        }\n    }\n    else if (targetKey === \"wms\" || targetKey === \"wmts\")\n    {\n        newValue.config.value.extent = oldValue[targetKey].extent;\n    }\n\n\n    return newValue;\n}\n\nconst processCrossfade = (crossfade) => {\n    if(!crossfade)\n        return undefined;\n    console.log(\"Processing crossfade\", crossfade);\n    return {\n        from: crossfade.from,\n        to: crossfade.to,\n        duration: crossfade.duration,\n        startZoom: crossfade.startZoom,\n        endZoom: crossfade.endZoom,\n    }\n}\n\nexport function convertConfig(config) {\n    if(isConfig(config))\n    {\n        let convertedCategories = [];\n        let groupMap = {};\n        let layerMap = {};\n\n        for(var layer of config.layers)\n        {\n            layer = convertLayer(layer);\n            \n            if(layer)\n            {\n                layerMap[layer.key] = layer;\n            }\n            else\n                console.log(\"Failed to convert layer! Not adding to map\")\n        }\n\n        for(var group of config.layerGroups)\n        {\n            let newGroup =\n                { \n                    group_key : group.key,\n                    name: group.name,\n                    openness: group.openness,\n                    layers: []\n                }\n\n            if(!group.layers)\n            {\n                //Bad hack but prevents crashing when no layers are in a group or the key is missing\n                console.warn(\"Provided layers in groups is not valid. Defaulting to an empty list.\", group);\n                group.layers = [];\n            }\n\n            for(var layerKey of group.layers)\n            {\n                if(layerMap[layerKey])\n                    newGroup.layers.push(layerMap[layerKey]);\n                else\n                    console.log(\"Could not find a mapped layer with key\", layerKey)\n            }\n\n            groupMap[group.key] = newGroup;\n        }\n\n        let categories = [];\n\n        for(var category of config.layerCategories)\n        {\n            let newCat = {\n                category_key: category.key,\n                name: category.name,\n                hidden: category.hidden,\n                openness: category.openness,\n                multiphasic: category.multiphasic,\n                selectiveness: category.selectiveness,\n                groups: [],\n                layers: [],\n                selection: {\n                    selection_type: category.selectiveness,\n                    selection_keys: category.defaultSelection\n                },\n                opacity: !isNaN(category.opacity) ? category.opacity : !isNaN(category.transparency) ? category.transparency : 1,\n                crossfade: processCrossfade(category.crossfade)\n            }\n\n            if(!category.layerGroups)\n            {\n                console.warn(\"Provided layer groups is not valid. Defaulting to an empty list.\", category);\n                category.layerGroups = [];\n            }\n\n            for(let grpKey of category.layerGroups)\n            {\n                if(groupMap[grpKey])\n                {\n                    newCat.groups.push(groupMap[grpKey]);\n                    for(let lyr of groupMap[grpKey].layers)\n                        newCat.layers.push(lyr);\n                }\n            }\n\n            categories.push(newCat);\n        }\n\n        return categories;\n    }\n\n}"],"names":[],"mappings":"AAAO,SAAS,SAAS,MAAQ,EAAA;AAC7B,EAAA,OAAO,MAAU,IAAA,MAAA,CAAO,MAAU,IAAA,MAAA,CAAO,eAAe,MAAO,CAAA,eAAA;AACnE;AAEO,SAAS,aAAa,QAAU,EAAA;AAEnC,EAAA,IAAI,QAAW,GAAA;AAAA,IACX,GAAK,EAAA,EAAA;AAAA,IACL,IAAM,EAAA,EAAA;AAAA,IACN,OAAS,EAAA,CAAA;AAAA,IACT,QAAQ;AAAC,GACb;AAEA,EAAA,IAAI,SAAY,GAAA,MAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,GAAA;AACR,IAAY,SAAA,GAAA,KAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,WAAA;AACR,IAAY,SAAA,GAAA,aAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,UAAA;AACR,IAAY,SAAA,GAAA,YAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,GAAA;AACR,IAAY,SAAA,GAAA,KAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,YAAA;AACR,IAAY,SAAA,GAAA,cAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,GAAA;AACR,IAAY,SAAA,GAAA,KAAA;AAEhB,EAAA,IAAG,QAAS,CAAA,IAAA;AACR,IAAY,SAAA,GAAA,MAAA;AAEhB,EAAA,IAAG,CAAC,SACJ,EAAA;AACI,IAAQ,OAAA,CAAA,GAAA,CAAI,2CAA2C,QAAQ,CAAA;AAC/D,IAAO,OAAA,MAAA;AAAA;AAGX,EAAA,QAAA,CAAS,MAAM,QAAS,CAAA,GAAA;AACxB,EAAA,QAAA,CAAS,OAAO,QAAS,CAAA,IAAA;AACzB,EAAA,QAAA,CAAS,UAAU,QAAS,CAAA,OAAA;AAC5B,EAAA,QAAA,CAAS,OAAO,IAAO,GAAA,SAAA;AACvB,EAAA,QAAA,CAAS,OAAO,KAAQ,GAAA;AAAA,IACpB,SAAA,EAAW,QAAS,CAAA,SAAS,CAAE,CAAA,SAAA;AAAA,IAC/B,OAAA,EAAS,QAAS,CAAA,SAAS,CAAE,CAAA,OAAA;AAAA,IAC7B,OAAA,EAAS,QAAS,CAAA,SAAS,CAAE,CAAA;AAAA,GACjC;AAEA,EAAA,IAAG,cAAc,KACjB,EAAA;AACI,IAAA,QAAA,CAAS,MAAO,CAAA,KAAA,CAAM,SAAY,GAAA,QAAA,CAAS,SAAS,CAAE,CAAA,SAAA;AACtD,IAAA,IAAI,kBAAkB,EAAC;AAEvB,IAAG,IAAA,QAAA,CAAS,SAAS,CAAA,CAAE,OACvB,EAAA;AACI,MAAA,OAAA,CAAQ,GAAI,CAAA,wBAAA,EAA0B,QAAS,CAAA,SAAS,EAAE,OAAO,CAAA;AACjE,MAAA,eAAA,CAAgB,OAAU,GAAA,IAAA;AAC1B,MAAA,eAAA,CAAgB,QAAW,GAAA,QAAA,CAAS,SAAS,CAAA,CAAE,OAAQ,CAAA,QAAA;AACvD,MAAA,eAAA,CAAgB,WAAc,GAAA,QAAA,CAAS,SAAS,CAAA,CAAE,OAAQ,CAAA,WAAA;AAE1D,MAAS,QAAA,CAAA,MAAA,CAAO,MAAM,OAAU,GAAA,eAAA;AAAA;AACpC,GAEK,MAAA,IAAA,SAAA,KAAc,KAAS,IAAA,SAAA,KAAc,MAC9C,EAAA;AACI,IAAA,QAAA,CAAS,MAAO,CAAA,KAAA,CAAM,MAAS,GAAA,QAAA,CAAS,SAAS,CAAE,CAAA,MAAA;AAAA;AAIvD,EAAO,OAAA,QAAA;AACX;AAEA,MAAM,gBAAA,GAAmB,CAAC,SAAc,KAAA;AACpC,EAAA,IAAG,CAAC,SAAA;AACA,IAAO,OAAA,MAAA;AACX,EAAQ,OAAA,CAAA,GAAA,CAAI,wBAAwB,SAAS,CAAA;AAC7C,EAAO,OAAA;AAAA,IACH,MAAM,SAAU,CAAA,IAAA;AAAA,IAChB,IAAI,SAAU,CAAA,EAAA;AAAA,IACd,UAAU,SAAU,CAAA,QAAA;AAAA,IACpB,WAAW,SAAU,CAAA,SAAA;AAAA,IACrB,SAAS,SAAU,CAAA;AAAA,GACvB;AACJ,CAAA;AAEO,SAAS,cAAc,MAAQ,EAAA;AAClC,EAAG,IAAA,QAAA,CAAS,MAAM,CAClB,EAAA;AAEI,IAAA,IAAI,WAAW,EAAC;AAChB,IAAA,IAAI,WAAW,EAAC;AAEhB,IAAQ,KAAA,IAAA,KAAA,IAAS,OAAO,MACxB,EAAA;AACI,MAAA,KAAA,GAAQ,aAAa,KAAK,CAAA;AAE1B,MAAA,IAAG,KACH,EAAA;AACI,QAAS,QAAA,CAAA,KAAA,CAAM,GAAG,CAAI,GAAA,KAAA;AAAA,OAC1B;AAEI,QAAA,OAAA,CAAQ,IAAI,4CAA4C,CAAA;AAAA;AAGhE,IAAQ,KAAA,IAAA,KAAA,IAAS,OAAO,WACxB,EAAA;AACI,MAAA,IAAI,QACA,GAAA;AAAA,QACI,WAAY,KAAM,CAAA,GAAA;AAAA,QAClB,MAAM,KAAM,CAAA,IAAA;AAAA,QACZ,UAAU,KAAM,CAAA,QAAA;AAAA,QAChB,QAAQ;AAAC,OACb;AAEJ,MAAG,IAAA,CAAC,MAAM,MACV,EAAA;AAEI,QAAQ,OAAA,CAAA,IAAA,CAAK,wEAAwE,KAAK,CAAA;AAC1F,QAAA,KAAA,CAAM,SAAS,EAAC;AAAA;AAGpB,MAAQ,KAAA,IAAA,QAAA,IAAY,MAAM,MAC1B,EAAA;AACI,QAAA,IAAG,SAAS,QAAQ,CAAA;AAChB,UAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,QAAS,CAAA,QAAQ,CAAC,CAAA;AAAA;AAEvC,UAAQ,OAAA,CAAA,GAAA,CAAI,0CAA0C,QAAQ,CAAA;AAAA;AAGtE,MAAS,QAAA,CAAA,KAAA,CAAM,GAAG,CAAI,GAAA,QAAA;AAAA;AAG1B,IAAA,IAAI,aAAa,EAAC;AAElB,IAAQ,KAAA,IAAA,QAAA,IAAY,OAAO,eAC3B,EAAA;AACI,MAAA,IAAI,MAAS,GAAA;AAAA,QACT,cAAc,QAAS,CAAA,GAAA;AAAA,QACvB,MAAM,QAAS,CAAA,IAAA;AAAA,QACf,QAAQ,QAAS,CAAA,MAAA;AAAA,QACjB,UAAU,QAAS,CAAA,QAAA;AAAA,QACnB,aAAa,QAAS,CAAA,WAAA;AAAA,QACtB,eAAe,QAAS,CAAA,aAAA;AAAA,QACxB,QAAQ,EAAC;AAAA,QACT,QAAQ,EAAC;AAAA,QACT,SAAW,EAAA;AAAA,UACP,gBAAgB,QAAS,CAAA,aAAA;AAAA,UACzB,gBAAgB,QAAS,CAAA;AAAA,SAC7B;AAAA,QACA,OAAS,EAAA,CAAC,KAAM,CAAA,QAAA,CAAS,OAAO,CAAI,GAAA,QAAA,CAAS,OAAU,GAAA,CAAC,KAAM,CAAA,QAAA,CAAS,YAAY,CAAA,GAAI,SAAS,YAAe,GAAA,CAAA;AAAA,QAC/G,SAAA,EAAW,gBAAiB,CAAA,QAAA,CAAS,SAAS;AAAA,OAClD;AAEA,MAAG,IAAA,CAAC,SAAS,WACb,EAAA;AACI,QAAQ,OAAA,CAAA,IAAA,CAAK,oEAAoE,QAAQ,CAAA;AACzF,QAAA,QAAA,CAAS,cAAc,EAAC;AAAA;AAG5B,MAAQ,KAAA,IAAA,MAAA,IAAU,SAAS,WAC3B,EAAA;AACI,QAAG,IAAA,QAAA,CAAS,MAAM,CAClB,EAAA;AACI,UAAA,MAAA,CAAO,MAAO,CAAA,IAAA,CAAK,QAAS,CAAA,MAAM,CAAC,CAAA;AACnC,UAAQ,KAAA,IAAA,GAAA,IAAO,QAAS,CAAA,MAAM,CAAE,CAAA,MAAA;AAC5B,YAAO,MAAA,CAAA,MAAA,CAAO,KAAK,GAAG,CAAA;AAAA;AAC9B;AAGJ,MAAA,UAAA,CAAW,KAAK,MAAM,CAAA;AAAA;AAG1B,IAAO,OAAA,UAAA;AAAA;AAGf;;;;"}