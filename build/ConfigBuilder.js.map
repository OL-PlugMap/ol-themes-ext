{"version":3,"file":"ConfigBuilder.js","sources":["../src/ConfigBuilder.js"],"sourcesContent":["\n// Default style: blue fill (50% opacity), black outline\nconst defaultStyle = {\n  static: {\n    fillColor: '#0000FF80', // Blue with 50% opacity (hex: #0000FF, 80 = 128/255 â‰ˆ 50%)\n   // strokeColor: '#000000', // Black outline\n    strokeWidth: 1\n  }\n};\n\nexport { EsriExportConfigBuilder, EsriExportEndpointConfigBuilder } from \"./esriExport\";\nexport { StaticVectorConfigBuilder } from \"./staticVector\";\nexport { EsriFeatureConfigBuilder, EsriFeatureEndpointConfigBuilder } from \"./esriFeature\";\n\n\n/**\n * Builder for XYZ layer configuration objects.\n *\n * Example usage:\n *   const config = new XYZConfigBuilder()\n *     .setKey('myLayerKey')\n *     .setName('My XYZ Layer')\n *     .setOpacity(0.8)\n *     .setMaxZoom(18)\n *     .setMinZoom(3)\n *     .addEndpoint({\n *       url: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\n *       zIndex: 1\n *     })\n *     .build();\n */\nexport class XYZConfigBuilder {\n  /**\n   * @param {Object} [initialConfig] - Optional initial configuration object.\n   */\n  constructor(initialConfig = {}) {\n    this._config = {\n      key: initialConfig.key || '',\n      name: initialConfig.name || '',\n      opacity: typeof initialConfig.opacity === 'number' ? initialConfig.opacity : 1,\n      config: {\n        type: 'xyz',\n        value: {\n          endpoints: [],\n          maxZoom: typeof initialConfig.maxZoom === 'number' ? initialConfig.maxZoom : 26,\n          minZoom: typeof initialConfig.minZoom === 'number' ? initialConfig.minZoom : 1,\n          ...(initialConfig.config && initialConfig.config.value ? initialConfig.config.value : {})\n        }\n      }\n    };\n\n    if (\n      initialConfig.config &&\n      initialConfig.config.value &&\n      Array.isArray(initialConfig.config.value.endpoints)\n    ) {\n      this._config.config.value.endpoints = [...initialConfig.config.value.endpoints];\n    }\n  }\n\n  setKey(key) {\n    this._config.key = key;\n    return this;\n  }\n\n  setName(name) {\n    this._config.name = name;\n    return this;\n  }\n\n  setOpacity(opacity) {\n    this._config.opacity = opacity;\n    return this;\n  }\n\n  setMaxZoom(maxZoom) {\n    this._config.config.value.maxZoom = maxZoom;\n    return this;\n  }\n\n  setMinZoom(minZoom) {\n    this._config.config.value.minZoom = minZoom;\n    return this;\n  }\n\n  /**\n   * Add an endpoint configuration.\n   * @param {Object} endpoint\n   * @param {string} endpoint.url - XYZ tile URL template (required).\n   * @param {number} [endpoint.zIndex] - Optional z-index for the layer.\n   * @throws {Error} If required parameters are missing or invalid.\n   */\n  addEndpoint(endpoint) {\n    if (!endpoint || typeof endpoint !== 'object') {\n      throw new Error('Endpoint must be an object.');\n    }\n    if (!endpoint.url || typeof endpoint.url !== 'string') {\n      throw new Error('Endpoint \"url\" is required and must be a string.');\n    }\n    if (endpoint.zIndex && typeof endpoint.zIndex !== 'number') {\n      throw new Error('Endpoint \"zIndex\" must be a number if provided.');\n    }\n    this._config.config.value.endpoints.push(endpoint);\n    return this;\n  }\n\n  /**\n   * Build and return the configuration object.\n   * @returns {Object}\n   */\n  build() {\n    return { \n        key: this._config.key,\n        name: this._config.name,\n        zIndex: this._config.config.value.endpoints[0]?.zIndex || 0,\n        hidden: false,\n        opacity: this._config.opacity,\n        xyz: {\n            endpoints: this._config.config.value.endpoints,\n            maxZoom: this._config.config.value.maxZoom,\n            minZoom: this._config.config.value.minZoom\n        }\n    };\n  }\n}\n\n\nexport class MapConfigBuilder {\n  constructor() {\n    this.config = {\n      layerCategories: [],\n      layerGroups: [],\n      layers: []\n    };\n  }\n\n/**\n * Adds a new layer category to the configuration.\n *\n * @param {Object} category - The layer category object to add.\n * @returns {ConfigBuilder} Returns the current instance for method chaining.\n */\n  addLayerCategory(category) {\n    this.config.layerCategories.push(category);\n    return this;\n  }\n\n/**\n * Adds a layer group to the configuration.\n *\n * @param {Object} group - The layer group object to add.\n * @returns {ConfigBuilder} The current instance for method chaining.\n */\n  addLayerGroup(group) {\n    this.config.layerGroups.push(group);\n    return this;\n  }\n\n/**\n * Adds one or more layers to the configuration.\n *\n * @param {Object|Object[]} layer - A single layer object or an array of layer objects to add.\n * @returns {ConfigBuilder} Returns the current instance for method chaining.\n */\n  addLayer(layer) {\n    if (Array.isArray(layer)) {\n      this.config.layers.push(...layer);\n    } else {\n      this.config.layers.push(layer);\n    }\n    return this;\n  }\n\n/**\n * Builds and returns the current configuration object.\n *\n * @returns {Object} The configuration object.\n */\n  build() {\n    return this.config;\n  }\n}\n\nexport class CategoryConfigBuilder {\n  constructor(config = {}) {\n    this.config = {\n        key: config.key || '',\n        name: config.name || '',\n        description: config.description || '',\n        icon: config.icon || '',\n        hidden: typeof config.hidden === 'boolean' ? config.hidden : false,\n        zIndex: typeof config.zIndex === 'number' ? config.zIndex : 0,\n        layerGroups: config.layerGroups || [],\n        multiphasic: config.multiphasic || false,\n        selectiveness: config.selectiveness || 'monoselective',\n        legend: config.legend || { enabled: false },\n        defaultSelection: config.defaultSelection || [],\n        opacity: typeof config.opacity === 'number' ? config.opacity : 1\n    };\n  }\n\n    /**\n     * Sets the unique key for the category.\n     * @param {string} key - The unique key for the category.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setKey(key) {\n        this.config.key = key;\n        return this;\n    }\n\n    /**\n     * Sets the name for the category.\n     * @param {string} name - The name of the category.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setName(name) {\n        this.config.name = name;\n        return this;\n    }\n\n    /**\n     * Sets the description for the category.\n     * @param {string} description - The description of the category.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setDescription(description) {\n        this.config.description = description;\n        return this;\n    }\n\n    /**\n     * Sets the icon for the category.\n     * @param {string} icon - The icon URL or class name for the category.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setIcon(icon) {\n        this.config.icon = icon;\n        return this;\n    }\n\n    /**\n     * Sets the visibility of the category.\n     * @param {boolean} hidden - Whether the category is hidden.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setHidden(hidden) {\n        this.config.hidden = hidden;\n        return this;\n    }\n\n    /**\n     * Sets the z-index for the category.\n     * @param {number} zIndex - The z-index for the category.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setZIndex(zIndex) {\n        this.config.zIndex = zIndex;\n        return this;\n    }\n\n    /**\n     * Adds a layer group to the category.\n     * @param {Object} layer - The layer object to add.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    addLayerGroup(layerGroup) {\n        this.config.layerGroups.push(layerGroup);\n        return this;\n    }\n\n    /**\n     * Sets whether the category is multiphasic.\n     * @param {boolean} multiphasic - Whether the category is multiphasic.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setMultiphasic() {\n        this.config.multiphasic = true;\n        return this;\n    }\n\n    /**\n     * Sets the selectiveness of the category.\n     * @param {string} selectiveness - The selectiveness type ('monoselective' or 'multiselective').\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setSelectiveness(selectiveness) {\n        const validSelectiveness = ['monoselective', 'polyselective'];\n        if (!validSelectiveness.includes(selectiveness)) {\n            throw new Error(`Selectiveness must be one of: ${validSelectiveness.join(', ')}`);\n        }\n        this.config.selectiveness = selectiveness;\n        return this;\n    }\n\n    /**\n     * Sets the opacity for the category.\n     * @param {number} opacity - The opacity value (0 to 1).\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     * */\n    setOpacity(opacity) {\n        if (typeof opacity !== 'number' || opacity < 0 || opacity > 1) {\n            throw new Error('Opacity must be a number between 0 and 1.');\n        }\n        this.config.opacity = opacity;\n        return this;\n    }\n\n    /**\n     * Sets the default selection for the category.\n     * @param {Array} defaultSelection - An array of layer keys that should be selected by default.\n     * @return {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setDefaultSelection(defaultSelection) {\n        if (!Array.isArray(defaultSelection)) {\n            throw new Error('Default selection must be an array.');\n        }\n        this.config.defaultSelection = defaultSelection;\n        return this;\n    }\n\n    /**\n     * Sets the legend configuration for the category.\n     * @param {Object} legend - The legend configuration object.\n     * @returns {CategoryConfigBuilder} Returns the current instance for method chaining.\n     */\n    setLegend(legend) {\n        if (typeof legend !== 'object' || legend === null) {\n            throw new Error('Legend must be an object.');\n        }\n        this.config.legend = legend;\n        return this;\n    }\n\n    /**\n     * Builds and returns the category configuration object.\n     * @returns {Object} The category configuration object.\n     */\n    build() {\n        return {\n            key: this.config.key,\n            name: this.config.name,\n            description: this.config.description,\n            icon: this.config.icon,\n            hidden: this.config.hidden,\n            zIndex: this.config.zIndex,\n            layerGroups: this.config.layerGroups,\n            multiphasic: this.config.multiphasic,\n            selectiveness: this.config.selectiveness,\n            legend: this.config.legend,\n            defaultSelection: this.config.defaultSelection,\n            opacity: this.config.opacity\n        };\n    }\n}\n\n"],"names":[],"mappings":"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"}