{"version":3,"file":"esriExport.js","sources":["../src/esriExport.js"],"sourcesContent":["import { Tile as TileLayer } from \"ol/layer.js\";\r\nimport { TileArcGISRest } from \"ol/source\";\r\nimport TileGrid from \"ol/tilegrid/TileGrid\"\r\n\r\nimport {getLogger} from './logger'\r\nimport { get } from \"ol/proj\";\r\nimport { getWidth } from \"ol/extent\";\r\n\r\nimport { _buildEngine } from './filterEngine'\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Generates OpenLayers TileLayer instances for ArcGIS REST endpoints with optional filtering and authentication.\r\n *\r\n * @param {Object} data - The configuration object for the export.\r\n * @param {Object} data.config - The configuration details.\r\n * @param {Object} data.config.value - The main config values.\r\n * @param {Array}  data.config.value.endpoints - Array of endpoint objects to generate layers for.\r\n * @param {string} data.key - Unique identifier for the layer group.\r\n * @param {number} [data.opacity=1] - Opacity for the layers (default: 1).\r\n * @param {Object} core - Core context object, typically containing authentication and service info.\r\n * @param {Object} [core.services] - Optional. Service tokens and base URLs keyed by tokenKey.\r\n * @returns {Array} Array of OpenLayers TileLayer instances, one for each endpoint.\r\n *\r\n * Each endpoint object in `data.config.value.endpoints` can have:\r\n *   - url {string}: ArcGIS REST endpoint URL.\r\n *   - bbox {string}: Optional. Bounding box for the request.\r\n *   - layersToShow {string}: Optional. Comma-separated list of layer IDs to show.\r\n *   - zIndex {number}: Optional. z-index for the layer.\r\n *   - tokenKey {string}: Optional. Key to look up authentication info in core.services.\r\n */\r\nexport const generate = (data,core) => {\r\n    let layers = data.config.value.endpoints.map(endpoint => {\r\n    //The random adds a random value to the parameter\r\n    //essentually cache busting  \r\n    let customParams = {\r\n      get random() {\r\n        return data.config.value.cacheBust ? Math.random() : null;\r\n      }\r\n    };\r\n\r\n    if (endpoint.bbox) {\r\n      customParams[\"BBOX\"] = endpoint.bbox;\r\n    }\r\n\r\n    if (endpoint.layersToShow) {\r\n      customParams[\"LAYERS\"] = endpoint.layersToShow;\r\n    }\r\n\r\n    if (data.config.value.layerDefs) {\r\n      customParams[\"layerDefs\"] = data.config.value.layerDefs\r\n    }\r\n\r\n    var projExtent = get('EPSG:3857').getExtent();\r\n    var startResolution = getWidth(projExtent) / 256;\r\n    var resolutions = new Array(22);\r\n    for (var i = 0, ii = resolutions.length; i < ii; ++i) {\r\n      resolutions[i] = startResolution / Math.pow(2, i);\r\n    }\r\n    var tileGrid = new TileGrid({\r\n      extent: [-13884991, 2870341, -7455066, 6338219],\r\n      resolutions: resolutions,\r\n      tileSize: [256, 256]\r\n    });\r\n\r\n    let source = new TileArcGISRest({\r\n      crossOrigin: 'anonymous',\r\n      ratio: 1,\r\n      maxZoom: 26,\r\n      tileGrid: tileGrid,\r\n      duration: 0\r\n      // tileGrid: new TileGrid(\r\n      //     { tileSize:[2048,2048]\r\n      //       , resolutions:[]\r\n\r\n      //       , extent: data.config.value.extent\r\n      //     }\r\n      //     )\r\n    });\r\n\r\n    source.setTileLoadFunction((image, src) => {\r\n      if(source.filterSet)\r\n      {\r\n        getLogger()(\"Filter set\", source.filterSet);\r\n        if(source.filterSet.mode != \"NONE\")\r\n        {\r\n          let condStr = \"\";\r\n          let conds = [];\r\n\r\n\r\n          let keys = Object.keys(source.filterSet.values);\r\n\r\n          if(!keys.length)\r\n              value = true;\r\n\r\n          for(let field of keys)\r\n          {\r\n              \r\n              let filter = source.filterSet.values[field];\r\n\r\n              getLogger()(\"Checking\", field, filter);\r\n\r\n              if(filter.any)\r\n                  conds.push(`${field} = ANY(${filter.values.map(a=>\"'\"+a+\"'\").join(\",\")})`);\r\n              else if(filter.all)\r\n              {\r\n                conds.push(`${field} = ALL(${filter.values.map(a=>\"'\"+a+\"'\").join(\",\")})`);\r\n              }\r\n              else if(filter.contains)\r\n                conds.push(`${field} LIKE '%${filter.values}%'`);\r\n              else if(filter.containsAny)\r\n                conds.push(filter.values.map(a => `${field} LIKE '%${a}%'`).join(\" OR \"));\r\n              else if(filter.containsAll)\r\n                conds.push(filter.values.map(a => `${field} LIKE '%${a}%'`).join(\" AND \"));                \r\n              else if(filter.exactly)\r\n                conds.push(`${field} = '${filter.values}'`);\r\n\r\n              getLogger()(\"Conds is now\", conds)\r\n          }\r\n\r\n          conds = conds.map(a => `(${a})`);\r\n                        \r\n          if(source.filterSet.mode == \"AND\")\r\n              condStr = conds.join(\" AND \");\r\n          if(source.filterSet.mode == \"OR\")\r\n            condStr = conds.join(\" OR \");\r\n\r\n\r\n          if(source.filterSet.layer != null)\r\n            condStr = source.filterSet.layer + \":\" + condStr;\r\n          else\r\n            condStr = \"all:\" + condStr; //TODO: I am unsure if this is even valid\r\n\r\n          getLogger()(\"Final where clause\", condStr);\r\n\r\n          image.getImage().src = src + `&layerDefs=${encodeURIComponent(condStr)}`;\r\n          return;\r\n\r\n        }\r\n      }\r\n      else\r\n        getLogger()(\"No Filters\", source);\r\n\r\n      image.getImage().src = src;\r\n    });\r\n\r\n\r\n    let lyr = new TileLayer({\r\n      visible: false,\r\n      preload: 4,\r\n      zIndex: endpoint.zIndex || 0,\r\n      opacity: data.opacity || 1,\r\n      source: source,\r\n      extent: data.config.value.extent\r\n    });\r\n    lyr.set('id', data.key);\r\n\r\n    source.applyFilters =\r\n      function (ls) {\r\n        getLogger()(\"Applying filters to \", ls);\r\n        if (!Array.isArray(ls) && ls.filts)\r\n          ls = ls.filts;\r\n        ls.forEach(layer => {\r\n\r\n          var def = {};\r\n          var conditions = [];\r\n          layer.values.forEach(value => {\r\n            if (value.applied && value.filter && value.filter.all && value.filter.all.length > 0) {\r\n              var indiConds = [];\r\n              value.filter.all.forEach(condition => {\r\n\r\n                if (condition.values.exact) {\r\n                  indiConds.push(\"( \" + condition.field + \" = '\" + condition.values.exact + \"' )\")\r\n                } else if (condition.values.range) {\r\n                  indiConds.push(\"( \" + condition.field + \" > '\" + condition.values.greaterThan + \"' AND \" + condition.field + \" < '\" + condition.values.lessThan + \"')\")\r\n                }\r\n\r\n              })\r\n\r\n              var finalCond = \"(\" + indiConds.join(\" AND \") + \")\";\r\n              conditions.push(finalCond);\r\n            }\r\n          });\r\n\r\n          var finalFilter = \"\";\r\n          switch (layer.mode) {\r\n            case \"OR\": finalFilter = conditions.join(\" OR \"); break;\r\n            case \"AND\": finalFilter = conditions.join(\" AND \"); break;\r\n          }\r\n\r\n          if (finalFilter.length > 0) {\r\n            def[layer.layerid] = finalFilter;\r\n            def = JSON.stringify(def);\r\n          }\r\n          else {\r\n            def = \"\"\r\n          }\r\n\r\n\r\n          let olddef = source.params_[\"layerDefs\"];\r\n          let newdef = def;\r\n\r\n          this.params_[\"layerDefs\"] = def;\r\n          if (olddef != newdef) {\r\n            if (newdef.length > 0) {\r\n              lyr.setVisible(true);\r\n              if (this.tileCache) {\r\n                this.tileCache.clear();\r\n              }\r\n              this.changed();\r\n            }\r\n            else {\r\n              lyr.setVisible(false);\r\n            }\r\n          }\r\n        })\r\n      };\r\n\r\n    source.oldChanged = source.changed;\r\n    \r\n    //This is a hack because calling changed wont clear the tile cache automatically\r\n    source.changed = () => {\r\n      //source.tileCache.clear();\r\n      source.oldChanged();\r\n    }\r\n\r\n    lyr.filter = _buildEngine(source, lyr);\r\n\r\n    source.clearFilters =\r\n      function (layer) {\r\n        var def = {};\r\n        def[layer.layerid] = \"0=1\";\r\n        def = JSON.stringify(def);\r\n\r\n        let olddef = source.params_[\"layerDefs\"];\r\n        let newdef = def;\r\n\r\n        this.params_[\"layerDefs\"] = def;\r\n\r\n        lyr.setVisible(false);\r\n\r\n        if (olddef != newdef) {\r\n          if (this.tileCache) {\r\n            this.tileCache.clear();\r\n          }\r\n          this.changed();\r\n        }\r\n      }\r\n\r\n    let configureSource = function (tokenKey) {\r\n      if (core.services && core.services[tokenKey]) {\r\n        let tokenData = core.services[tokenKey];\r\n        source.setUrl(`${tokenData.baseUrl || \"\"}${endpoint.url}`);\r\n        if (tokenData.token) {\r\n          customParams[\"token\"] = tokenData.token;\r\n        }\r\n        source.params_ = customParams;\r\n      }\r\n    }\r\n\r\n    if (endpoint.tokenKey) {\r\n      // if the token data has already been fetched and stored in core.services\r\n      // go ahead and configure the source w/ the data, otherwise, postpone\r\n      // the configuration until `setServicesCmd` has been triggered\r\n      if (core.services && core.services[endpoint.tokenKey]) {\r\n        configureSource(endpoint.tokenKey);\r\n      } else {\r\n        self.pendingConfiguration.push({\r\n          name: data.key,\r\n          fn: configureSource,\r\n          params: [endpoint.tokenKey]\r\n        });\r\n      }\r\n    }\r\n    else {\r\n      source.setUrl(endpoint.url);\r\n      source.params_ = customParams;\r\n    }\r\n    return lyr;\r\n  });\r\n\r\n  return layers;\r\n};\r\n\r\n/**\r\n * Helper class to build configuration objects for the `generate` function.\r\n *\r\n * Example usage:\r\n *   const config = new EsriExportConfigBuilder()\r\n *     .setKey('myLayerGroup')\r\n *     .setOpacity(0.8)\r\n *     .setExtent([-13884991, 2870341, -7455066, 6338219])\r\n *     .addEndpoint({\r\n *       url: 'https://example.com/arcgis/rest/services/Layer/MapServer/export',\r\n *       bbox: '...',\r\n *       layersToShow: '0,1,2',\r\n *       zIndex: 2,\r\n *       tokenKey: 'myToken'\r\n *     })\r\n *     .build();\r\n */\r\nexport class EsriExportConfigBuilder {\r\n  /**\r\n   * @param {Object} [initialConfig] - Optional initial configuration object.\r\n   */\r\n  constructor(initialConfig = {}) {\r\n    this._config = {\r\n      config: {\r\n        value: {\r\n          endpoints: [],\r\n          ...(initialConfig.config && initialConfig.config.value ? initialConfig.config.value : {})\r\n        },\r\n      },\r\n      key: initialConfig.key || '',\r\n      opacity: typeof initialConfig.opacity === 'number' ? initialConfig.opacity : 1,\r\n    };\r\n\r\n    // If endpoints are provided, ensure it's an array\r\n    if (\r\n      initialConfig.config &&\r\n      initialConfig.config.value &&\r\n      Array.isArray(initialConfig.config.value.endpoints)\r\n    ) {\r\n      this._config.config.value.endpoints = [...initialConfig.config.value.endpoints];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the unique key for the layer group.\r\n   * @param {string} key\r\n   */\r\n  setKey(key) {\r\n    this._config.key = key;\r\n    return this;\r\n  }\r\n\r\n  setName (name) {\r\n    this._config.name = name;\r\n    return this;\r\n  }\r\n\r\n  setZIndex (zIndex) {\r\n    this._config.zIndex = zIndex;\r\n    return this;\r\n  }\r\n\r\n  setHidden (hidden) {\r\n    this._config.hidden = hidden;\r\n    return this;\r\n  }\r\n\r\n  setLayerId (layerId) {\r\n    this._config.layerId = layerId;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity for the layers.\r\n   * @param {number} opacity\r\n   */\r\n  setOpacity(opacity) {\r\n    this._config.opacity = opacity;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the extent for the layers.\r\n   * @param {Array<number>} extent\r\n   */\r\n  setExtent(extent) {\r\n    this._config.config.value.extent = extent;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the layerDefs for the layers.\r\n   * @param {Object|string} layerDefs\r\n   */\r\n  setLayerDefs(layerDefs) {\r\n    this._config.config.value.layerDefs = layerDefs;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add an endpoint configuration with validation.\r\n   * @param {Object} endpoint\r\n   * @param {string} endpoint.url - ArcGIS REST endpoint URL. (required)\r\n   * @param {string} [endpoint.bbox] - Optional bounding box.\r\n   * @param {string} [endpoint.layersToShow] - Optional comma-separated list of layer IDs.\r\n   * @param {number} [endpoint.zIndex] - Optional z-index.\r\n   * @param {string} [endpoint.tokenKey] - Optional token key for authentication.\r\n   * @throws {Error} If required parameters are missing or invalid.\r\n   */\r\n  addEndpoint(endpoint) {\r\n    // Validate required fields\r\n    if (!endpoint || typeof endpoint !== 'object') {\r\n      throw new Error('Endpoint must be an object.');\r\n    }\r\n    if (!endpoint.url || typeof endpoint.url !== 'string') {\r\n      throw new Error('Endpoint \"url\" is required and must be a string.');\r\n    }\r\n    // Optional: Validate types of optional fields\r\n    if (endpoint.bbox && typeof endpoint.bbox !== 'string') {\r\n      throw new Error('Endpoint \"bbox\" must be a string if provided.');\r\n    }\r\n    if (endpoint.layersToShow && typeof endpoint.layersToShow !== 'string') {\r\n      throw new Error('Endpoint \"layersToShow\" must be a string if provided.');\r\n    }\r\n    if (endpoint.zIndex && typeof endpoint.zIndex !== 'number') {\r\n      throw new Error('Endpoint \"zIndex\" must be a number if provided.');\r\n    }\r\n    if (endpoint.tokenKey && typeof endpoint.tokenKey !== 'string') {\r\n      throw new Error('Endpoint \"tokenKey\" must be a string if provided.');\r\n    }\r\n\r\n    this._config.config.value.endpoints.push(endpoint);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Build and return the configuration object.\r\n   * @returns {Object}\r\n   */\r\n  buildRaw() {\r\n    return this._config;\r\n  }\r\n\r\n  build() {\r\n    return {\r\n      key: this._config.key,\r\n      name: this._config.name,\r\n      zIndex: this._config.zIndex,\r\n      hidden: this._config.hidden,\r\n      layerId: this._config.layerId,\r\n      opacity: this._config.opacity,\r\n      esriExport: {\r\n        endpoints: this._config.config.value.endpoints,\r\n        extent: this._config.config.value.extent || [-13884991, 2870341, -7455066, 6338219],\r\n        layerDefs: this._config.config.value.layerDefs || {},\r\n\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Builder for a single endpoint configuration.\r\n *\r\n * Example usage:\r\n *   const endpoint = new EsriExportEndpointConfigBuilder({ url: '...' })\r\n *     .setBbox('...')\r\n *     .setLayersToShow('0,1,2')\r\n *     .setZIndex(2)\r\n *     .setTokenKey('myToken')\r\n *     .build();\r\n */\r\nexport class EsriExportEndpointConfigBuilder {\r\n  /**\r\n   * @param {Object} [initialEndpoint] - Optional initial endpoint configuration.\r\n   */\r\n  constructor(initialEndpoint = {}) {\r\n    this._endpoint = { ...initialEndpoint };\r\n  }\r\n\r\n  setUrl(url) {\r\n    this._endpoint.url = url;\r\n    return this;\r\n  }\r\n\r\n  setBbox(bbox) {\r\n    this._endpoint.bbox = bbox;\r\n    return this;\r\n  }\r\n\r\n  setLayersToShow(layersToShow) {\r\n    this._endpoint.layersToShow = layersToShow;\r\n    return this;\r\n  }\r\n\r\n  setZIndex(zIndex) {\r\n    this._endpoint.zIndex = zIndex;\r\n    return this;\r\n  }\r\n\r\n  setTokenKey(tokenKey) {\r\n    this._endpoint.tokenKey = tokenKey;\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    if (!this._endpoint.url || typeof this._endpoint.url !== 'string') {\r\n      throw new Error('Endpoint \"url\" is required and must be a string.');\r\n    }\r\n    if (this._endpoint.bbox && typeof this._endpoint.bbox !== 'string') {\r\n      throw new Error('Endpoint \"bbox\" must be a string if provided.');\r\n    }\r\n    if (this._endpoint.layersToShow && typeof this._endpoint.layersToShow !== 'string') {\r\n      throw new Error('Endpoint \"layersToShow\" must be a string if provided.');\r\n    }\r\n    if (this._endpoint.zIndex && typeof this._endpoint.zIndex !== 'number') {\r\n      throw new Error('Endpoint \"zIndex\" must be a number if provided.');\r\n    }\r\n    if (this._endpoint.tokenKey && typeof this._endpoint.tokenKey !== 'string') {\r\n      throw new Error('Endpoint \"tokenKey\" must be a string if provided.');\r\n    }\r\n    return { ...this._endpoint };\r\n  }\r\n}"],"names":["TileLayer","value"],"mappings":"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"}