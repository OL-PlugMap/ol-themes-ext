{"version":3,"file":"filterEngine.js","sources":["../src/filterEngine.js"],"sourcesContent":["\n\nimport { getLogger } from './logger'\n\n//layer.filter.when(field).isAny([])\n//layer.filter.when(field).isAll([])\n\nexport const _buildEngine = (source,vtLayer) => {\n\n    if(!source.filterSet)\n        source.filterSet = { mode: \"NONE\", values: {}, layer: null };\n  \n    return {\n      when: (field) => {\n        \n        if(source.filterSet.mode == \"NONE\")\n          source.filterSet.mode = \"OR\"\n\n        return {\n          isAny: (values) => {\n            source.filterSet.values[field] = { any: true, values: values };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);\n          },\n          isAll: (values) => {\n            source.filterSet.values[field] = { all: true, values: values };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);\n          },\n          contains: (value) => {\n            source.filterSet.values[field] = { contains: true, values: value };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);\n          },\n          containsAny: (values) => {\n            source.filterSet.values[field] = { containsAny: true, values: values };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);\n          },\n          containsAll: (values) => {\n            source.filterSet.values[field] = { containsAll: true, values: values };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);\n          },\n          isExactly: (value) => {\n            source.filterSet.values[field] = { exactly: true, values: value };\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer);              \n          },\n          clear : () => {\n            delete source.filterSet.values[field];\n            getLogger()(source.filterSet);\n            source.changed();\n            return _buildEngine(source, vtLayer); \n          }\n        }\n      },\n      clear: () => {\n        source.filterSet.values = {};\n        source.filterSet.mode = \"NONE\"\n        source.changed();\n        return _buildEngine(source, vtLayer);              \n      },\n      andJoin: () => {\n        source.filterSet.mode = \"AND\"\n        getLogger()(source.filterSet);\n        source.changed();\n        return _buildEngine(source, vtLayer);\n      },\n      orJoin: () => {\n        source.filterSet.mode = \"OR\"\n        getLogger()(source.filterSet);\n        source.changed();\n        return _buildEngine(source, vtLayer);\n      },\n      appliesTo: (layer) => {\n        source.filterSet.layer = layer;\n        getLogger()(source.filterSet);\n        source.changed();\n        return _buildEngine(source, vtLayer);  \n      }\n    }\n  };\n\nexport const _checkFilter = (source, feature) => {\n    \n    if(source.filterSet) {\n      let value = false;\n\n      if(source.filterSet.mode == \"AND\")\n          value = true;\n    \n      let keys = Object.keys(source.filterSet.values);\n      let fields = Object.keys(feature.properties_);\n\n      if(!keys.length)\n          value = true;\n\n      for(let field of keys) {\n          getLogger()(\"Checking\", field);\n          let filterMatch = false;\n\n          if(fields.includes(field)) {\n              let filter = source.filterSet.values[field];\n              let valueToTest = feature.properties_[field];\n\n              getLogger()(\"Testing\", valueToTest);\n\n              if(filter.any && filter.values.includes(valueToTest))\n                filterMatch = true;\n              else if(filter.all) {\n                filterMatch = true;\n                for(let value of filter.values)\n                    filterMatch = filterMatch && valueToTest == value;\n              }\n              else if(filter.contains && (valueToTest+\"\").indexOf(filter.values) >= 0)\n                  filterMatch = true;\n              else if(filter.containsAny) {\n                filterMatch = false || filter.values.length == 0;\n                for(let value of filter.values) {\n                  if ((valueToTest+\"\").indexOf(value) >= 0) {\n                      filterMatch = true;\n                      break;\n                  }\n                }\n              }\n              else if(filter.containsAll) {\n                  filtermatch = true;\n                  for(let value of filter.values) {\n                    if(((valueToTest+\"\").indexOf(value) < 0)) {\n                      filterMatch = false;\n                      break;\n                    }\n                  }\n              }\n              else if(filter.exactly && valueToTest == filter.values) {\n                filterMatch = true;\n              }\n          }\n          else\n          {\n            filterMatch = false;\n          }\n              \n          if(source.filterSet.mode == \"AND\")\n              value = value && filterMatch;\n\n          if(source.filterSet.mode == \"OR\")\n              value = value || filterMatch;\n      }\n\n      return value;\n    }\n\n    //When there is no filterSet, everything is shown\n    return true;\n}"],"names":["value"],"mappings":"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"}