{"version":3,"file":"map-layer-helper.js","sources":["../src/map-layer-helper.js"],"sourcesContent":["import { Group as LayerGroup, Tile as TileLayer } from \"ol/layer.js\";\nimport XYZ from \"ol/source/XYZ\";\nimport { get } from \"ol/proj\";\nimport { getWidth } from \"ol/extent\";\nimport WMTS from \"ol/source/WMTS\";\nimport WMTSTileGrid from \"ol/tilegrid/WMTS\";\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport ImageLayer from \"ol/layer/Image\";\n\nimport * as mvt from './mvt'\nimport * as esriExport from './esriExport'\nimport * as esriFeature from './esriFeature'\nimport * as staticVector from './staticVector'\n\nimport {getLogger} from './logger'\n\n\nconst mapboxBaseUrl = 'https://api.mapbox.com';\n\n/**\n * Gets the path from a mapbox:// URL.\n * @param {string} url The Mapbox URL.\n * @return {string} The path.\n * @private\n */\nexport function getMapboxPath(url) {\n  const startsWith = 'mapbox://';\n  if (url.indexOf(startsWith) !== 0) {\n    return '';\n  }\n  return url.slice(startsWith.length);\n}\n\n/**\n * Turns mapbox:// sprite URLs into resolvable URLs.\n * @param {string} url The sprite URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeSpriteUrl(url, token, baseUrl) {\n  if(url.startsWith(\"..\"))\n    return baseUrl + \"/\" + url;\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  const startsWith = 'sprites/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected sprites url: ${url}`);\n  }\n  const sprite = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/styles/v1/${sprite}/sprite?access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// glyphs URLs into resolvable URLs.\n * @param {string} url The glyphs URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeGlyphsUrl(url, token, baseUrl) {\n  if(url.startsWith(\"..\"))\n    return baseUrl + \"/\" + url;\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  const startsWith = 'fonts/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected fonts url: ${url}`);\n  }\n  const font = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/fonts/v1/${font}/0-255.pbf?access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// style URLs into resolvable URLs.\n * @param {string} url The style URL.\n * @param {string} token The access token.\n * @return {string} A resolvable URL.\n * @private\n */\nexport function normalizeStyleUrl(url, token, baseUrl) {\n  if(url.startsWith(\"..\"))\n    return baseUrl + \"/\" + url;\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  const startsWith = 'styles/';\n  if (mapboxPath.indexOf(startsWith) !== 0) {\n    throw new Error(`unexpected style url: ${url}`);\n  }\n  const style = mapboxPath.slice(startsWith.length);\n\n  return `${mapboxBaseUrl}/styles/v1/${style}?&access_token=${token}`;\n}\n\n/**\n * Turns mapbox:// source URLs into vector tile URL templates.\n * @param {string} url The source URL.\n * @param {string} token The access token.\n * @return {string} A vector tile template.\n * @private\n */\nexport function normalizeSourceUrl(url, token, baseUrl) {\n  if(url.startsWith(\"..\"))\n    return baseUrl + \"/\" + url;\n  const mapboxPath = getMapboxPath(url);\n  if (!mapboxPath) {\n    return url;\n  }\n  return `https://{a-d}.tiles.mapbox.com/v4/${mapboxPath}/{z}/{x}/{y}.vector.pbf?access_token=${token}`;\n}\n\nexport default class Themes {\n  constructor() {\n    this.pendingConfiguration = [];\n    this.core = null;\n    this.lastState = {}\n    this.states = [];\n    this.layerMap = {};\n\n    window.layerMap = this.layerMap;\n  }\n\n  apply(core) {\n    this.core = core;\n  }\n\n  processPending() {\n    let self = this;\n    this.pendingConfiguration.forEach(item => {\n      item.fn.apply(self, item.params);\n    });\n  }\n  addLayers(layers) {\n\n    let self = this;\n    let core = this.core;\n    let map = core.getMap();\n\n    let layersMapped = layers.map(layer => {\n      return self.makeLayer.call(self, layer);\n    });\n\n\n    layersMapped.map(layer => {\n\n      return layer;\n    });\n\n    return layersMapped;\n  }\n\n  makeGroup(groupConfig, layerRepository) {\n\n    let neededLayerKeys = groupConfig.layers.map(layer => {\n      return layer.key;\n    });\n\n    let layers = layerRepository.filter(lyr => {\n      return neededLayerKeys.includes(lyr.key);\n    })\n\n    let groupGroup = new LayerGroup({\n      opacity: isNaN(groupConfig.opacity) || groupConfig.opacity == null ? 1 : groupConfig.opacity,\n      layers: layers\n    });\n\n    groupGroup.name = groupConfig.name;\n    groupGroup.key = groupConfig.key || groupConfig.group_key;\n    groupGroup.type = \"group\";\n    groupGroup.opacity = isNaN(groupConfig.opacity) || groupConfig.opacity == null ? 1 : groupConfig.opacity;\n    groupGroup.getLayerByKey = this.getLayerByKey(groupGroup);\n    groupGroup.layers = layers;\n\n    let oldSetOpacity = groupGroup.setOpacity;\n    groupGroup.setOpacity = function(opacity) {\n      if(oldSetOpacity)\n        oldSetOpacity.call(groupGroup, opacity);\n      else\n        this.getLayers().getArray().forEach(layer => {\n          layer.setOpacity(opacity);\n        });\n\n      this.opacity = opacity;\n    };\n\n    let oldSetVisibility = groupGroup.setVisibility;\n    groupGroup.setVisible = function(visible) {\n      if(oldSetVisibility)\n        oldSetVisibility.call(groupGroup, visible);\n      else\n        this.getLayers().getArray().forEach(layer => {\n          layer.setVisible(visible);\n        });\n    };\n\n    groupGroup.getLayerByKey = function(key) {\n      let matchingLayers = groupGroup.getLayers().getArray().filter(layer => {\n        return layer.metadata ? layer.metadata.key === key : layer.key === key;\n      });\n\n      if(matchingLayers)\n        return matchingLayers[0];\n    };\n\n    return groupGroup;\n  }\n\n  makeCategory(category) {\n    getLogger()(\"Make Category\", category);\n\n    const select = category.selection;\n\n    // Special handling in the event a mono selection type's selection_key was saved into selection_keys array.\n    const isMono = select.selection_type === 'monoselection' || select.selection_type === 'monoselective';\n    if (isMono && !select.selection_key && Array.isArray(select.selection_keys)) {\n      select.selection_key = select.selection_keys[select.selection_keys.length - 1];\n    }\n    let selectionKeys = select.selection_key ? [ select.selection_key ] : select.selection_keys;\n\n    let layers = [];\n    if(category.layers)\n    {\n      layers = category.layers.map(layer => {\n        let lyr = this.makeLayer(layer);\n        if(!lyr.getAttributions) {\n          lyr.getAttributions = function() {\n            return lyr.get('attributions') || '';\n          }\n        }\n        if(selectionKeys.includes(layer.key))\n          lyr.setVisible(true);\n\n        return lyr;\n      });\n    }\n\n    // show layers that are part of current selection\n    // and hide ones that are not part of current selection\n    this.setLayerVisibilities(select, layers);\n\n    // group category layers into a layer group\n    let categoryGroup = new LayerGroup({\n      opacity: isNaN(category.opacity) || category.opacity == null ? 1 : category.opacity,\n      layers: layers\n    });\n    categoryGroup.metadata =\n      { key : category.category_key,\n        name: category.category_name\n      };\n      categoryGroup.set('id', category.category_key);\n      categoryGroup.set('selection_type', select.selection_type)\n      categoryGroup.set('selection_keys', selectionKeys)\n      categoryGroup.selectLayer = this.selectLayer(categoryGroup)\n      categoryGroup.deselectLayer = this.deselectLayer(categoryGroup)\n      categoryGroup.getLayerByKey = this.getLayerByKey(categoryGroup);\n\n    // This is the new metadata for the category\n\n    categoryGroup.key = category.category_key;\n    categoryGroup.name = category.name;\n\n    categoryGroup.transparency = categoryGroup.getOpacity();\n    categoryGroup.getAttributions = () => { return null; }\n\n    let oldSetOpacity = categoryGroup.setOpacity;\n    categoryGroup.setOpacity = function(opacity) {\n      oldSetOpacity.call(categoryGroup, opacity);\n      categoryGroup.transparency = opacity;\n    }\n    categoryGroup.setTransparancy = categoryGroup.setOpacity;\n    categoryGroup.type = \"category\";\n\n    categoryGroup.getSelectionType = function() {\n      return select.selection_type;\n    }\n\n    categoryGroup.getSelectionKeys = function() {\n      return categoryGroup.get('selection_keys');\n    }\n\n    categoryGroup.isMonoSelective = function() {\n      return categoryGroup.get('selection_type') === 'monoselective' || categoryGroup.get('selection_type') === 'monoselection';\n    }\n\n    categoryGroup.isMultiphasic = function() {\n      return category.multiphasic === true || category.canChangeOpacity === true;\n    }\n\n    categoryGroup.canChangeOpacity = function() {\n      return category.multiphasic === true || category.canChangeOpacity === true;\n    }\n\n    /* TODO Set Groups */\n    if(category.groups && category.groups.length > 0)\n    {\n      categoryGroup.groups = category.groups.map(group => {\n        let grp = this.makeGroup(group, layers);\n        grp.getAttributions = () => { return null; }\n        return grp;\n      });\n    }\n\n    categoryGroup.getVisibleLayers = this.getVisibleLayers(categoryGroup);\n\n    categoryGroup.getFeaturesInView = () => {\n      let features = [];\n      categoryGroup.getVisibleLayers().forEach(layer => {\n        if(layer.getFeaturesInView)\n        {\n          features = features.concat(layer.getFeaturesInView());\n        }\n      });\n      return features;\n    }\n\n    categoryGroup.getFeaturesUnderPixel = (pixel) => {\n      let features = [];\n      categoryGroup.getLayers().forEach(layer => {\n        if(layer.getFeaturesUnderPixel)\n        {\n          features = features.concat(layer.getFeaturesUnderPixel(pixel));\n        }\n      });\n      return features;\n    }\n\n    return categoryGroup;\n  }\n\n  /*\n    This converts a list of \"categories\" into a list of layer groups\n    It also adds extensions needed to control category selection\n  */\n  addLayerCategories(categories) {\n    getLogger()(\"Adding categories\")\n    let self = this;\n    let core = this.core;\n    let map = core.getMap();\n    let groups = categories.map(category => {\n      getLogger()(\"Processing\", category);\n      let cat = this.makeCategory(category);\n      return cat;\n    });\n    groups.forEach(group => map.addLayer(group));\n    return groups;\n  }\n\n  getLayerByKey(category) {\n    return (key) => {\n      let matchingLayers = category.getLayers().getArray().filter(layer => {\n        if(!layer.metadata)\n        {  \n          getLogger()(\"FIX ME\", layer);\n          return false;\n        }\n        return layer.metadata.key === key;\n      });\n      if(matchingLayers)\n        return matchingLayers[0];\n    }\n  }\n\n  getVisibleLayers(category) {\n    return () => {\n      let matchingLayers = category.getLayers().getArray().filter(layer => {\n        return layer.getVisible();\n      });\n\n      return matchingLayers;\n    }\n  }\n\n  selectLayer(category) {\n    return function(layerToSelect) {\n      if(typeof layerToSelect == \"string\")\n      {\n        var lyrs = category.getLayers().getArray();\n\n        var filt = lyrs.filter(a => a.get('id') == layerToSelect)\n\n        if(filt && filt.length)\n          layerToSelect = filt[0];\n        else\n          console.log(\"Couldnt find layer by id\", layerToSelect);\n      }\n      let categoryId = category.get('id');\n      let selectionType = category.get('selection_type');\n      let selectionKeys = category.get('selection_keys');\n      let targetKey = layerToSelect.get('id');\n\n      switch(selectionType)\n      {\n        case 'monoselection':\n        case 'monoselective':\n            category.getLayers().forEach(layer =>\n              {\n                //toggleLayer(layer, targetKey === layer.get('id'))\n                layer.setVisible(false);\n              });\n              layerToSelect.setVisible(true);\n              selectionKeys = [ targetKey ];\n          break;\n        case 'polyselection':\n        case 'polyselective':\n          if(!selectionKeys.includes(targetKey))\n          {\n            layerToSelect.setVisible(true);\n            selectionKeys.push(targetKey);\n          }\n          break;\n\n        default: console.log(\"Unknown selection type\", selectionType, \"looking for one of [monoselection,monoselective,polyselection,polyselective]\");\n      }\n\n\n      category.set('selection_keys', selectionKeys);\n    }\n  }\n\n  deselectLayer(category) {\n    return function(layerToSelect) {\n      if(typeof layerToSelect == \"string\")\n      {\n        var filt = category.getLayers().getArray().filter(a => a.get('id') == layerToSelect)\n        if(filt && filt.length)\n          layerToSelect = filt[0];\n        else\n          console.log(\"Couldnt find layer by id\", layerToSelect);\n      }\n      let categoryId = category.get('id');\n      let selectionType = category.get('selection_type');\n      let selectionKeys = category.get('selection_keys');\n      let targetKey = layerToSelect.get('id');\n\n      switch(selectionType)\n      {\n        case 'monoselective':\n        case 'monoselection':\n          if( selectionKeys.includes(targetKey))\n          {\n              layerToSelect.setVisible(false);\n              selectionKeys = selectionKeys.filter(a => a != targetKey);\n          }\n          break;\n        case 'polyselective':\n        case 'polyselection':\n          if(selectionKeys.includes(targetKey))\n          {\n            layerToSelect.setVisible(false);\n            selectionKeys = selectionKeys.filter(a => a != targetKey);\n          }\n          break;\n\n        default: console.log(\"Unknown selection type\");\n      }\n\n\n      category.set('selection_keys', selectionKeys);\n    }\n  }\n\n  toggleSelectedThemes(data) {\n    if (!data)\n      return;\n    let self = this;\n    let map = this.core.getMap();\n    data.forEach(datum => {\n      let category =\n        map\n          .getLayers()\n          .getArray()\n          .find(l => l.get('id') === datum.category_key);\n\n      let layers = category.getLayers().getArray();\n\n      self.setLayerVisibilities(datum.selection, layers);\n    });\n\n    this.lastState = data;\n  }\n\n  setLayerVisibilities(selection, layers) {\n    let toggleLayer = function (layer, isMatch) {\n      // if (layer instanceof LayerGroup) {\n      //   console.log(\"Its a layer group folks!\")\n      //   layer.setVisible(isMatch);\n      //   layer.getLayers().getArray().forEach(child => child.setVisible(isMatch));\n      // } else {\n        layer.setVisible(isMatch);\n      //}\n    };\n\n    switch (selection.selection_type) {\n      case \"monoselective\":\n      case \"monoselection\":\n        layers.forEach(layer => {\n          toggleLayer(layer, selection.selection_key === layer.get('id'));\n        });\n        break;\n      case \"polyselective\":\n      case \"polyselection\":\n        layers.forEach(layer => {\n          toggleLayer(layer, selection.selection_keys.includes(layer.get('id')));\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  setCategoryTransparency(data) {\n    let map = this.core.getMap();\n    let category =\n      map\n        .getLayers()\n        .getArray()\n        .find(l => l.get('id') === data.category_key);\n    if (category) {\n      if(isNaN(data.transparency) || data.transparency == null)\n        data.transparency = 1;\n      category.setOpacity(data.transparency);\n    }\n  }\n\n  groupLayers(layerConfig, layers) {\n    for(let layer of layers) {\n      if(!layer.getAttributions) {\n        layer.getAttributions = function() {\n          return layer.get('attributions') || '';\n        }\n      }\n    }\n    if (layers.length > 1) {\n      getLogger()(\"Grouping these layers\");\n      let group = new LayerGroup({ layers: layers });\n      group.set('id', layerConfig.key);\n      window.layerMap[layerConfig.key] = group;\n      group.metadata =\n        { key : layerConfig.key,\n          name: layerConfig.name,\n          isGroup: true\n        };\n\n      let oldVis = group.setVisible;\n      let oldOpac = group.setOpacity;\n\n      group.setVisible = function(vis) {\n        getLogger()(\"Setting visibility of group\", vis, this);\n        oldVis.call(group, vis);\n        this.getLayers().getArray().forEach(layer => {\n          layer.setVisible(vis);\n        });\n      };\n\n      group.setOpacity = function(opac) {\n        getLogger()(\"Setting opacity on group\", opac, this);\n        oldOpac.call(group, opac);\n        this.getLayers().getArray().forEach(layer => {\n          layer.setOpacity(opac);\n        });\n      };\n\n      if(layers[0].getFeaturesInView)\n      {\n        group.getFeaturesInView = layers[0].getFeaturesInView;\n      }\n\n      if(layers[0].getFeaturesUnderPixel)\n      {\n        group.getFeaturesUnderPixel = layers[0].getFeaturesUnderPixel;\n      }\n\n      let highlightLayers = layers.filter(l => l.highlight ? true : false);\n      \n      if(highlightLayers.length > 0)\n      {\n        group.highlight = (item) => {\n          highlightLayers.forEach((layer) => {\n            console.log(\"Calling highlight on layer\", layer)\n            layer.highlight(item);\n          });\n        }\n      }\n\n      let unhighlightLayers = layers.filter(l => l.unhighlight ? true : false);\n      \n      if(unhighlightLayers.length > 0)\n      {\n        group.unhighlight = (item) => {\n          unhighlightLayers.forEach((layer) => {\n            layer.unhighlight(item);\n          });\n        }\n      }\n      \n      let unhighlightAllLayers = layers.filter(l => l.unhighlightAll ? true : false);\n      \n      if(unhighlightAllLayers.length > 0)\n      {\n        group.unhighlightAll = () => {\n          unhighlightAllLayers.forEach((layer) => {\n            layer.unhighlightAll();\n          });\n        }\n      }\n\n      group = this.applyLayerMetadataFromConfig(group, layerConfig);\n\n      return group;\n    } else if (layers.length === 1) {\n      layers[0].set('id', layerConfig.key);\n      window.layerMap[layerConfig.key] = layers[0];\n      \n      layers[0] = this.applyLayerMetadataFromConfig(layers[0], layerConfig);\n\n      return layers[0];\n    } else {\n      throw new Error(`Could not make layer for ${layerConfig.key}`);\n    }\n  };\n\n  applyLayerMetadataFromConfig(layer, layerConfig) {\n    layer.metadata = layer.metadata || {};\n    \n    layer.metadata.key = layerConfig.key;\n    layer.key = layerConfig.key;\n\n    layer.metadata.name = layerConfig.name;\n    layer.name = layerConfig.name;\n\n    layer.metadata.type = \"layer\";\n    layer.type = \"layer\";\n\n    return layer;\n  }\n\n  makeLayer(layerConfig) {\n    getLogger()(\"Make layer\", layerConfig);\n    // finalizes layer as either a layer group if it has multiple\n    // endpoints or as a single layer if it only has one endpoint\n\n    try {\n      let self = this;\n      let core = this.core;\n      let layers = null;\n      let layerType = layerConfig.config.type.toLowerCase();\n\n      getLogger()(\"Processing a layer with type\", layerType);\n\n      switch (layerType) {\n        case \"mvt\":\n          layers = mvt.generate(layerConfig, core);\n          return this.groupLayers(layerConfig, layers);\n        case \"staticvector\":\n          layers = staticVector.generate(layerConfig, core);\n          return this.groupLayers(layerConfig, layers);\n        case \"xyz\":\n          getLogger()(layerConfig.config.value.endpoints);\n          layers = layerConfig.config.value.endpoints.map(endpoint => {\n            let lyr = new TileLayer({\n              visible: false,\n              preload: 4,\n              zIndex: endpoint.zIndex || 0,\n              opacity: isNaN(layerConfig.opacity) || layerConfig.opacity == null ? 1 : layerConfig.opacity,\n              source: new XYZ({\n                crossOrigin: 'anonymous',\n                url: endpoint.url,\n                maxZoom: layerConfig.config.value.maxZoom || 26,\n                minZoom: layerConfig.config.value.minZoom || 1,\n                tileLoadFunction: (imageTile, src) => {\n                  imageTile.getImage().src = src;\n                }\n              })\n            });\n            lyr.set('id', layerConfig.key);\n            lyr.set('name', layerConfig.name);\n            return lyr;\n          });\n\n          return this.groupLayers(layerConfig, layers);\n\n        case \"wmts\":\n          var projection = get(\"EPSG:3857\"),\n            projectionExtent = projection.getExtent(),\n            size = getWidth(projectionExtent) / 256,\n            zooms = 15 + 1,\n            resolutions = new Array(zooms),\n            matrixIds = new Array(zooms);\n          for (let z = 0; z < zooms; ++z) {\n            resolutions[z] = size / Math.pow(2, z);\n            matrixIds[z] = z;\n          }\n\n          layers = layerConfig.config.value.endpoints.map(endpoint => {\n\n            let errors = [];\n            if(!endpoint.url || endpoint.url.indexOf(\"{TileMatrixSet}\") == -1)\n            {\n              errors.push(\"Missing \\\"{TileMatrixSet}\\\" in WMTS endpoint\");\n            }\n            if(!endpoint.url || endpoint.url.indexOf(\"{TileMatrix}\") == -1)\n            {\n              errors.push(\"Missing \\\"{TileMatrix}\\\" in WMTS endpoint\");\n            }\n            if(!endpoint.url || endpoint.url.indexOf(\"{TileRow}\") == -1)\n            {\n              errors.push(\"Missing \\\"{TileRow}\\\" in WMTS endpoint\");\n            }\n            if(!endpoint.url || endpoint.url.indexOf(\"{TileCol}\") == -1)\n            {\n              errors.push(\"Missing \\\"{TileCol}\\\" in WMTS endpoint\");\n            }\n            if(errors.length > 0)\n            {\n              console.error(\"Errors in WMTS endpoint\", errors);\n            }\n\n            let source = new WMTS({\n              crossOrigin: 'anonymous',\n              matrixSet: 'webmercator',\n              format: 'image/png',\n              projection: projection,\n              requestEncoding: 'REST',\n              tileGrid: new WMTSTileGrid({\n                extent: layerConfig.config.value.extent,\n                resolutions: resolutions,\n                matrixIds: matrixIds\n              }),\n              style: 'default',\n              opaque: false,\n              transparent: true,\n              url: endpoint.url\n            });\n            let configureSource = function (tokenKey) {\n              if (core.services && core.services[tokenKey]) {\n                let tokenData = core.services[tokenKey];\n                source.setUrl(`${tokenData.baseUrl || \"\"}${endpoint.url}`);\n                source.setTileLoadFunction(function (imageTile, src) {\n                  imageTile.getImage().src = `${src}?token=${tokenData.token || \"\"}`;\n                });\n              }\n            }\n\n            if (endpoint.tokenKey) {\n              // if the token data has already been fetched and stored in core.services\n              // go ahead and configure the source w/ the data, otherwise, postpone\n              // the configuration until `setServicesCmd` has been triggered\n              if (core.services && core.services[endpoint.tokenKey]) {\n                configureSource(endpoint.tokenKey);\n              } else {\n                self.pendingConfiguration.push({\n                  name: layerConfig.key,\n                  fn: configureSource,\n                  params: [endpoint.tokenKey]\n                });\n              }\n            }\n\n            let lyr = new TileLayer({\n              visible: false,\n              preload: 4,\n              zIndex: endpoint.zIndex || 0,\n              opacity: isNaN(layerConfig.opacity) || layerConfig.opacity == null ? 1 : layerConfig.opacity,\n              source: source,\n              opaque: false\n            });\n            lyr.set('id', layerConfig.key);\n            lyr.set('name', layerConfig.name);\n            return lyr;\n          });\n\n          return this.groupLayers(layerConfig, layers);\n\n        case \"wms\":\n          var projection = proj.get(\"EPSG:3857\"),\n            projectionExtent = projection.getExtent(),\n            size = getWidth(projectionExtent) / 256,\n            zooms = 15 + 1,\n            resolutions = new Array(zooms);\n          for (let z = 0; z < zooms; ++z) {\n            resolutions[z] = size / Math.pow(2, z);\n          }\n\n          layers = layerConfig.config.value.endpoints.map(endpoint => {\n            //The random adds a random value to the parameter\n            //essentially cache busting\n            let customParams = {\n              get random() {\n                return Math.random();\n              }\n            };\n\n            let source = new ImageWMS({\n              params: { 'LAYERS': 'geonode:shapes' },\n              ratio: 1,\n              serverType: 'geoserver',\n              resolutions: resolutions,\n              projection: projection,\n              url: endpoint.url\n            });\n\n            let configureSource = function (tokenKey) {\n              if (core.services && core.services[tokenKey]) {\n                let tokenData = core.services[tokenKey];\n                source.setUrl(`${tokenData.baseUrl || \"\"}${endpoint.url}`);\n                if (tokenData.token) {\n                  customParams[\"token\"] = tokenData.token;\n                }\n                source.params_ = customParams;\n              }\n            }\n\n            if (endpoint.tokenKey) {\n              // if the token data has already been fetched and stored in core.services\n              // go ahead and configure the source w/ the data, otherwise, postpone\n              // the configuration until `setServicesCmd` has been triggered\n              if (core.services && core.services[endpoint.tokenKey]) {\n                configureSource(endpoint.tokenKey);\n              } else {\n                self.pendingConfiguration.push({\n                  name: layerConfig.key,\n                  fn: configureSource,\n                  params: [endpoint.tokenKey]\n                });\n              }\n            }\n\n            let lyr = new ImageLayer({\n              zIndex: endpoint.zIndex || 0,\n              extent: layerConfig.config.value.extent,\n              source: source\n            });\n            lyr.set('id', layerConfig.key);\n            lyr.set('name', layerConfig.name);\n            return lyr;\n          })\n\n          return this.groupLayers(layerConfig, layers);\n\n        case \"esrimapservice\":\n        case \"esriexport\":\n          layers = esriExport.generate(layerConfig,core);\n          return this.groupLayers(layerConfig, layers);\n\n        case \"esrifeatureservice\":\n        case \"esrifeature\":\n            layers = esriFeature.generate(layerConfig, core);\n            return this.groupLayers(layerConfig, layers);\n\n        default:\n          throw new Error(`Layer type '${layerConfig.config.type}' has not been implemented.`);\n      }\n    }\n    catch (err) {\n      debugger;\n      console.error(\"Error processing layer\", layerConfig);\n      console.error(err);\n    }\n\n  }\n}\n\n"],"names":["LayerGroup","mvt.generate","staticVector.generate","TileLayer","esriExport.generate","esriFeature.generate"],"mappings":"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"}