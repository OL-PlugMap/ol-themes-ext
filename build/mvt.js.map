{"version":3,"file":"mvt.js","sources":["../src/mvt.js"],"sourcesContent":["import VectorTileLayer from 'ol/layer/VectorTile';\r\nimport { Group as LayerGroup } from \"ol/layer.js\";\r\nimport VectorLayer from 'ol/layer/Vector';\r\n\r\nimport VectorTileSource from 'ol/source/VectorTile';\r\n\r\nimport {Cluster, Vector as VectorSource} from 'ol/source';\r\n\r\nimport MVT from 'ol/format/MVT';\r\n\r\nimport { ConfigurableStyle } from './vectorStyles'\r\nimport { getLogger } from './logger';\r\n\r\nimport { _buildEngine } from './filterEngine'\r\n\r\n\r\nlet _filterEngine = (source) => {\r\n  (feature) => {\r\n    getLogger()(\"Filter Engine Old\");\r\n    var renderFeature = true;\r\n    var fev =\r\n    {\r\n      render: false\r\n      , renderFn: function () { return false; }\r\n      , filtersRan: false\r\n      , filtersChecked: {}\r\n    }\r\n\r\n    if (source.filter) {\r\n      fev.filtersRan = true;\r\n      renderFeature = true;\r\n      var keys = Object.keys(source.filter);\r\n      keys.forEach(key => {\r\n        getLogger()(\"Applying\", key, source.filter[key]);\r\n        var filterResult =\r\n        {\r\n          checked: true\r\n          , result: false\r\n          , valuesChecked: {}\r\n        }\r\n\r\n        var valuesMet = [];\r\n        source.filter[key].values.forEach(value => {\r\n          var valueResult =\r\n          {\r\n            conditionMet: false\r\n          }\r\n          if (value.filter.all) {\r\n            var allMet = true;\r\n            value.filter.all.forEach(filter => {\r\n              if (!feature || !feature.properties_) {\r\n              }\r\n              if (feature.properties_[filter.field]) {\r\n                if (filter.values && filter.values.exact) {\r\n                  allMet = allMet && (feature.properties_[filter.field] + \"\") == filter.values.exact;\r\n                }\r\n                else if (filter.values && (filter.values.greaterThan != undefined)) {\r\n                  var value = feature.properties_[filter.field];\r\n\r\n                  allMet = allMet && (value >= filter.values.greaterThan) && (value < filter.values.lessThan);\r\n                }\r\n                else if (filter.values && filter.values.null) {\r\n                  allMet = allMet && (feature.properties_[filter.field] == undefined || feature.properties_[filter.field] == null)\r\n                }\r\n                else {\r\n                  allMet = false;\r\n                }\r\n              }\r\n              else if (filter.values.null) {\r\n                allMet = true;\r\n              } else {\r\n                allMet = false;\r\n              }\r\n            });\r\n\r\n            valueResult.conditionMet = allMet;\r\n            filterResult[value.name] = valueResult;\r\n\r\n            //feature.properties_[\"FilterEngine_\" + key + \"_allMet_\" + value.name] = allMet;\r\n\r\n            valuesMet.push(allMet);\r\n          }\r\n\r\n          if (value.filter.any) {\r\n            var allMet = false;\r\n            value.filter.any.forEach(filter => {\r\n              if (!feature || !feature.properties_) {\r\n              }\r\n              if (feature.properties_[filter.field]) {\r\n                if (filter.values && filter.values.exact) {\r\n                  allMet = allMet || (feature.properties_[filter.field] + \"\") == filter.values.exact;\r\n                }\r\n                else if (filter.values && (filter.values.greaterThan != undefined)) {\r\n                  var value = feature.properties_[filter.field];\r\n\r\n                  allMet = allMet || (value >= filter.values.greaterThan) && (value < filter.values.lessThan);\r\n                }\r\n                else if (filter.values && filter.values.null) {\r\n                  allMet = allMet || (feature.properties_[filter.field] == undefined || feature.properties_[filter.field] == null)\r\n                }\r\n                else {\r\n                  allMet = false;\r\n                }\r\n              }\r\n              else if (filter.values.null) {\r\n                allMet = true;\r\n              } else {\r\n                allMet = false;\r\n              }\r\n            });\r\n\r\n            valueResult.conditionMet = allMet;\r\n            filterResult[value.name] = valueResult;\r\n\r\n            //feature.properties_[\"FilterEngine_\" + key + \"_allMet_\" + value.name] = allMet;\r\n\r\n            valuesMet.push(allMet);\r\n          }\r\n\r\n          fev.filtersChecked[key] = filterResult;\r\n        });\r\n\r\n\r\n        var renderThisFeature = false || source.filter[key].values.length == 0;\r\n\r\n        if (source.filter[key].mode == \"OR\") {\r\n          valuesMet.forEach(value => {\r\n            renderThisFeature = renderThisFeature || value;\r\n          })\r\n        }\r\n\r\n        if (source.filter[key].mode == \"AND\") {\r\n          var renderThisFeature = true;\r\n          valuesMet.forEach(value => {\r\n            renderThisFeature = renderThisFeature && value;\r\n          })\r\n        }\r\n\r\n        filterResult.result = renderThisFeature;\r\n\r\n        fev.filtersChecked[key] = filterResult;\r\n\r\n\r\n\r\n        //feature.properties_[\"FilterEngine_\" + key + \"_render\"] = renderThisFeature\r\n        if (source.filterMode == \"AND\")\r\n          renderFeature = renderFeature && renderThisFeature;\r\n        else\r\n          renderFeature = renderFeature || renderThisFeature;\r\n      })\r\n\r\n    }\r\n\r\n    fev.renderFn = function () {\r\n      let flt = source.filter;\r\n      let filterSets = Object.keys(flt);\r\n      let render = true;\r\n\r\n      if (source.filterMode == \"AND\") {\r\n        render = true;\r\n      }\r\n      else {\r\n        render = false;\r\n      }\r\n\r\n      for (var i = 0; i < filterSets.length; i++) {\r\n        var filterSet = flt[filterSets[i]];\r\n\r\n        var match = false; // || filterSet.values.length == 0;\r\n        var orMode = true;\r\n\r\n        if (filterSet.mode == \"AND\") {\r\n          match = true;\r\n          orMode = false;\r\n        }\r\n\r\n\r\n        for (var t = 0; t < filterSet.values.length; t++) {\r\n          var value = filterSet.values[t];\r\n          var fc = fev.filtersChecked[filterSets[i]]\r\n          if (!fc) {\r\n            debugger;\r\n            //We gonna crash ... why ...\r\n          }\r\n          var condVal = fc[value.name]\r\n\r\n          if (value.applied) {\r\n            if (orMode) {\r\n              match = match || condVal.conditionMet;\r\n              if (match)\r\n                break;\r\n            }\r\n            else {\r\n              match = match && condVal.conditionMet;\r\n              if (!match)\r\n                break\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        if (source.filterMode == \"AND\") {\r\n          render = render && match;\r\n          if (!render) {\r\n            break;\r\n          }\r\n        }\r\n        else {\r\n          render = render || match;\r\n          if (render) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      fev.render = render;\r\n\r\n    }\r\n\r\n    feature.properties_[\"FilterEngine\"] = fev;\r\n\r\n\r\n\r\n    //feature.properties_[\"FilterEngine_render\"] = renderFeature\r\n    return renderFeature;\r\n  };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Applies filter definitions to a VectorTile source and layer.\r\n *\r\n * This function returns a handler that can be called with a `layerset` object containing filter definitions.\r\n * It updates the source's filter state and toggles the layer's visibility based on whether any filters are applied.\r\n *\r\n * @param {ol/source/VectorTile} source - The vector tile source to apply filters to.\r\n * @param {ol/layer/VectorTile} vtLayer - The vector tile layer whose visibility may be toggled.\r\n * @returns {Function} A function that takes a `layerset` object and applies the filters.\r\n *\r\n * Example usage:\r\n * ```js\r\n * // Assume vtLayer is a VectorTileLayer and source is its VectorTileSource\r\n * const layerset = {\r\n *   filts: [\r\n *     {\r\n *       layerid: 'myLayer',\r\n *       values: [\r\n *         { applied: true, filter: { all: [{ field: 'foo', values: { exact: 'bar' } }] } }\r\n *       ],\r\n *       mode: 'AND'\r\n *     }\r\n *   ],\r\n *   mode: 'AND'\r\n * };\r\n * vtLayer.applyFilters(layerset);\r\n * ```\r\n */\r\nlet _applyFilters = (source, vtLayer) => {\r\n  //TODO: Can we interpret vtLayer or source based off the other?\r\n  return (layerset) => {\r\n    if (!source.filter)\r\n    source.filter = {};\r\n\r\n    if (Array.isArray(layerset.filts)) {\r\n      layerset.filts.forEach(lyr => {\r\n        //todo remove the test \r\n        source.filter['test_' + lyr.layerid] = lyr;\r\n      })\r\n    }\r\n\r\n    source.filterMode = layerset.mode;\r\n\r\n    var epk = Object.keys(source.filter)\r\n\r\n    var anyApplied = false;\r\n\r\n    for (var i = 0; i < epk.length && !anyApplied; i++) {\r\n      var f = source.filter[epk[i]];\r\n      for (var v = 0; v < f.values.length && !anyApplied; v++) {\r\n        anyApplied = anyApplied || f.values[v].applied\r\n      }\r\n    }\r\n\r\n    if (source.inview)\r\n      vtLayer.setVisible(true);\r\n\r\n    if (anyApplied) {\r\n      if (!source.inview)\r\n        vtLayer.setVisible(true);\r\n      //this.changed();\r\n    }\r\n    else {\r\n      if (!source.inview)\r\n        vtLayer.setVisible(false);\r\n      //this.changed();\r\n    }\r\n\r\n\r\n  };\r\n};\r\n\r\n\r\nlet _clearFilters = (source) => {\r\n  (layer) => {\r\n    if (!source.filter)\r\n    source.filter = {};\r\n    delete endpoint.filter['test_' + layer.layerid];\r\n\r\n    if (Object.keys(source.filter).length == 0) {\r\n      vtLayer.setVisible(false);\r\n    }\r\n\r\n    this.changed();\r\n  };\r\n};\r\n\r\n\r\nlet getId = (feature) => {\r\n  getLogger()(\"Getting id from\", feature)\r\n  let featureId = -1;\r\n    if(isNaN(feature))\r\n    {\r\n      getLogger()(\"Feature isnan\", feature)\r\n      if(feature.properties_)\r\n      {\r\n        featureId = feature.get(\"iso_a3\"); //TODO\r\n        getLogger()(\"Got id\", featureId)\r\n      }\r\n      else\r\n      {\r\n        getLogger()(\"Halp\");\r\n      }\r\n    }\r\n    else\r\n    {\r\n      getLogger()(\"Feature is a number\", feature);\r\n      featureId = feature;\r\n    }\r\n  getLogger(\"Returning id for feature\", featureId);\r\n  return featureId;\r\n}\r\n\r\nlet _unhighlight = (source) => {\r\n  return (feature) => {\r\n    delete source.highlightFeats[getId(feature)];\r\n    source.changed();\r\n  };\r\n};\r\n\r\nlet _unhighlightAll = (source) => {\r\n  return () => {\r\n    source.highlightFeats = [];\r\n    source.changed();\r\n  };\r\n};\r\n\r\nlet _highlight = (source) => {\r\n  source.highlightFeats = {};\r\n  return (feature) => {\r\n    getLogger()(\"Highlighting\", feature);\r\n    \r\n    source.highlightFeats[getId(feature)] = true;\r\n    source.changed();\r\n  };\r\n};\r\n\r\nlet _refreshFunction = (source) =>\r\n{\r\n  return () => {\r\n    source.changed();\r\n    source.refresh();\r\n  };\r\n};\r\n\r\nlet _loaderOld = (endpoint) => {\r\n  return function(tile, url) {\r\n    getLogger()(\"Loader\", tile, url);\r\n    tile.setLoader(function(extent, resolution, projection, onSuccess, onError) {\r\n      tile.status__ = \"loading\";\r\n      var fetchModel =\r\n        {\r\n          method: 'GET',\r\n          mode: 'cors',\r\n          headers: endpoint.headers\r\n        };\r\n      if(endpoint.nocache)\r\n      {\r\n        fetchModel.cache = 'no-cache';\r\n      }\r\n      \r\n      getLogger()(\"Fetching\", url);\r\n      return fetch(url, fetchModel).then(function(response) {\r\n        \r\n        return response.arrayBuffer().then(function(data) {\r\n          try\r\n          {\r\n            const format = tile.getFormat()\r\n            const features = format.readFeatures(data, {\r\n              extent: extent,\r\n              featureProjection: projection\r\n            });\r\n            getLogger()(\"Got features\", url, features);\r\n            tile.setFeatures(features);\r\n            onSuccess(features);\r\n          }\r\n          catch(ex)\r\n          {\r\n            getLogger()(\"Unable to load tile\", ex, tile, url);\r\n            tile.setFeatures([]);\r\n            onError();\r\n          }\r\n        })\r\n        .catch(ex => {\r\n          getLogger()(\"Unable to get AB for tile\", ex, tile, url);\r\n          tile.setFeatures([]);\r\n          onError();\r\n        });\r\n      })\r\n      .catch(err => {\r\n        getLogger()(\"Error Fetching\", err);\r\n        // In the event there is an error setting the status to error would be wise however, when a tile state is set to error the rest of the map starts doing weird things.\r\n        tile.setFeatures([]);\r\n        onError();\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nlet _loader = (endpoint) => {\r\n  return function(tile, url) {\r\n    getLogger()(\"Loader\", tile, url);\r\n    tile.setLoader(function(extent, resolution, projection) {\r\n      {\r\n        tile.status__ = \"loading\"\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\r\n          'GET',\r\n          typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n          true\r\n        );\r\n        for(let header in endpoint.headers)\r\n        {\r\n          xhr.setRequestHeader(header, endpoint.headers[header]);\r\n        }\r\n\r\n        xhr.responseType = 'arraybuffer';\r\n        \r\n        xhr.withCredentials = false;\r\n\r\n        /**\r\n         * @param {Event} event Event.\r\n         * @private\r\n         */\r\n        xhr.onload = function (event) {\r\n          let format = tile.getFormat();\r\n          // status will be 0 for file:// urls\r\n          if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n            const type = format.getType();\r\n            /** @type {Document|Node|Object|string|undefined} */\r\n            let source;\r\n            source = /** @type {ArrayBuffer} */ (xhr.response);\r\n            \r\n            if (source) {\r\n              let feats = [];\r\n              try {\r\n                feats = format.readFeatures(source, {\r\n                  extent: extent,\r\n                  featureProjection: projection,\r\n                })\r\n              } catch (e) {\r\n                getLogger()(\"Tile failed to load\", e, tile, url);\r\n              }\r\n              tile.onLoad(\r\n                /** @type {Array<import(\"./Feature.js\").default>} */\r\n                ( feats\r\n                ),\r\n                format.readProjection(source)\r\n              );\r\n              \r\n              tile.status__ = \"loaded\"\r\n            } else {\r\n              tile.onError();\r\n              tile.status__ = \"error\"\r\n            }\r\n          } else {\r\n            tile.onError();\r\n            tile.status__ = \"error\"\r\n          }\r\n        };\r\n        /**\r\n         * @private\r\n         */\r\n        xhr.onerror = function() { \r\n          tile.status__ = \"error\"; \r\n          tile.onError()\r\n        };\r\n        xhr.send();\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\nlet _deduplicateFeatures = (features) => {\r\n  let rets = {};\r\n\r\n  features.forEach((feat) => {\r\n    rets[feat.getId()+\"\"] = feat;\r\n  });\r\n\r\n  var keys = Object.keys(rets);\r\n\r\n  var ret = [];\r\n\r\n  keys.forEach(key => {\r\n    ret.push(rets[key]);\r\n  });\r\n\r\n  return ret;\r\n};\r\n\r\nlet _getFeaturesInView = (vtLayer, map) => {\r\n  return async () => {\r\n    return getLoadingPromise(vtLayer).then(async () => {\r\n      let features = vtLayer.getFeaturesInExtent(map.getView().calculateExtent())\r\n      \r\n      let ret = _deduplicateFeatures(features);\r\n\r\n      return ret;\r\n    });\r\n  }\r\n};\r\n\r\n\r\nlet getLoadingPromise = (vtLayer) => {\r\n  let resolve_, reject_ = null;\r\n  let promise = new Promise((resolve,reject) => {\r\n    resolve_ = resolve; reject_ = reject;\r\n  });\r\n\r\n  if(!vtLayer.loadPromiseResolves)\r\n    vtLayer.loadPromiseResolves = [];\r\n  vtLayer.loadPromiseResolves.push(resolve_);\r\n\r\n  setTimeout(() => {\r\n    if(!isLoadingTiles(vtLayer.getSource()))\r\n    {\r\n      resolve_(\"Not Loading\");\r\n    }\r\n  }, 150);\r\n\r\n\r\n  return promise;\r\n}\r\n\r\nlet _getFeaturesUnderPixel = (vtLayer, map) => {\r\n  return async (pixel, event) => {\r\n    if(!pixel || !Array.isArray(pixel) || pixel.length != 2)\r\n    {\r\n      console.warn(\"Invalid parameter provided to getFeaturesUnderPixel. Expected an array with a length of 2. Got\", pixel);\r\n    }\r\n    getLogger()(\"Getting features at\", pixel);\r\n    return getLoadingPromise(vtLayer).then(async () => {\r\n      getLogger()(\"Loaded tiles, calling getFeatures\");\r\n      \r\n      let coords = map.getCoordinateFromPixel(pixel);\r\n      getLogger()(\"Coords\", coords);\r\n\r\n      let zoom = map.getView().getZoom();\r\n      getLogger()(\"Zoom\", zoom);\r\n\r\n      let buf = (25 - zoom);\r\n\r\n      switch(zoom)\r\n      {\r\n        case 1:\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        case 5:\r\n        case 6:\r\n          buf = 100; break;\r\n        case 7:\r\n        case 8:\r\n        case 9:\r\n        case 10:\r\n          buf = 50; break;\r\n        case 11:\r\n        case 12:\r\n        case 13:\r\n        case 14:\r\n        case 15:\r\n          buf = 20; break;\r\n        case 16:\r\n        case 17:\r\n        case 18:\r\n        case 19:\r\n        case 20:\r\n        case 21:\r\n        case 22:\r\n        case 23:\r\n        case 24:\r\n          buf = 10; break;\r\n        default: buf = 1; break;\r\n      }\r\n\r\n      if(buf <= 0) buf = 1;\r\n      getLogger()(\"buf\", buf);\r\n\r\n      let ext = [coords[0]-buf,coords[1]-buf,coords[0]+buf,coords[1]+buf]\r\n      getLogger()(\"ext\", ext);\r\n\r\n      let features = vtLayer.getSource().getFeaturesInExtent(ext);\r\n      //let features = await vtLayer.getFeatures(pixel);\r\n      getLogger()(\"Got features\", features);\r\n      \r\n      let ret = _deduplicateFeatures(features);\r\n      getLogger()(\"Deduplicated\", ret);\r\n\r\n      return ret;\r\n    });\r\n  }\r\n};\r\n\r\nlet _configureSource = (tokenKey) => {\r\n  if (core.services && core.services[tokenKey]) {\r\n    let tokenData = core.services[tokenKey];\r\n    source.setUrl(`${tokenData.baseUrl || \"\"}${endpoint.url}`);\r\n  }\r\n};\r\n\r\n//TODO: Make a function that, if tiles are loaded installs a promise\r\n//Change the below to check if the promise(s) exist\r\n//When they exist and load has finished then resolve them\r\n\r\nlet isLoadingTiles = (source) => {\r\n  let numLoading = Object.values(source.sourceTiles_).filter(tile => { return tile.status__ == \"loading\" }).length;\r\n  getLogger()(\"Loading\", numLoading);\r\n  return numLoading > 0;\r\n}\r\n\r\nlet handlePostRender = (source, vtLayer) => {\r\n  \r\n  vtLayer.loadPromise = new Promise((resolve,reject) => {\r\n    vtLayer.loadPromiseResolve = resolve;\r\n    vtLayer.loadPromiseReject = reject;\r\n  });\r\n\r\n  return (evt) => {\r\n    // Note this crashes in ol 10.5, todo: Fix this\r\n    let loadingTiles = source?.sourceTileCache ? source.sourceTileCache.getValues().filter(tile => { return tile.status__ == \"loading\" }) : [];\r\n    let loadingTilesCount = loadingTiles.length;\r\n\r\n    if(loadingTilesCount > 0)\r\n    {\r\n      //Still loading\r\n    }\r\n    else\r\n    {\r\n      //Loaded! Fire the loaded promise \r\n      if(vtLayer.loadPromiseResolves)\r\n      {\r\n        vtLayer.loadPromiseResolves.forEach(resolve => {\r\n          resolve(\"Looded\")\r\n        });\r\n        vtLayer.loadPromiseResolves = null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const generate = (data, core) => {\r\n    var layers = data.config.value.endpoints.map(endpoint => {\r\n        var url = endpoint.url;\r\n\r\n        var source = new VectorTileSource({\r\n          maxZoom: 15,\r\n          format: new MVT({\r\n            idProperty: 'id'\r\n          }),\r\n          tileSize: endpoint.tileSize === undefined ? 256 : endpoint.tileSize,\r\n          url: url\r\n        });\r\n\r\n        if(endpoint.headers)\r\n        {\r\n          var loader = _loader(endpoint);\r\n\r\n          source.setTileLoadFunction(loader);\r\n        }\r\n\r\n        console.log(data);\r\n        var vtLayer = new VectorTileLayer({\r\n          declutter: data.config.value.declutter === true,\r\n          source: source,\r\n          zIndex: endpoint.zIndex || 1000,\r\n        });\r\n\r\n        let moo = new ConfigurableStyle(endpoint, source, vtLayer);\r\n        vtLayer.moo = moo;\r\n        vtLayer.style = moo.getStyle;\r\n        vtLayer.setStyle(moo.getStyle)\r\n\r\n        vtLayer.set('id', data.key);\r\n        \r\n        vtLayer.refreshFunction = _refreshFunction(source);\r\n\r\n        vtLayer.highlight = _highlight(source);\r\n\r\n        vtLayer.unhighlight = _unhighlight(source);\r\n\r\n        vtLayer.unhighlightAll = _unhighlightAll(source);\r\n\r\n        vtLayer.applyFilters = _applyFilters(source, vtLayer);\r\n\r\n        vtLayer.filter = _buildEngine(source,vtLayer);\r\n          \r\n        vtLayer.clearFilters = _clearFilters(source);\r\n\r\n        vtLayer.filterEngine = _filterEngine(source);\r\n\r\n        vtLayer.getFeaturesInView = _getFeaturesInView(vtLayer, core.getMap())\r\n\r\n        vtLayer.getFeaturesUnderPixel = _getFeaturesUnderPixel(vtLayer, core.getMap());\r\n      \r\n        vtLayer.on('postrender', handlePostRender(source, vtLayer));\r\n        source.on('tileloadend', handlePostRender(source, vtLayer));\r\n        source.on('tileloaderror', handlePostRender(source, vtLayer));\r\n\r\n        if(data.config.value.cluster && data.config.value.cluster.enabled)\r\n        {\r\n          console.log(\"Clistering enabled\");\r\n\r\n          const clusterSource = new Cluster({\r\n            distance: data.config.value.cluster.distance,\r\n            minDistanc: data.config.value.cluster.minDistance,\r\n            source: source,\r\n          });\r\n\r\n          const clusters = new VectorLayer({\r\n            source: clusterSource,\r\n            style: function (feature) {\r\n              const size = feature.get('features').length;\r\n              let style = styleCache[size];\r\n              if (!style) {\r\n                style = new Style({\r\n                  image: new CircleStyle({\r\n                    radius: 10,\r\n                    stroke: new Stroke({\r\n                      color: '#fff',\r\n                    }),\r\n                    fill: new Fill({\r\n                      color: '#3399CC',\r\n                    }),\r\n                  }),\r\n                  text: new Text({\r\n                    text: size.toString(),\r\n                    fill: new Fill({\r\n                      color: '#fff',\r\n                    }),\r\n                  }),\r\n                });\r\n                styleCache[size] = style;\r\n              }\r\n              return style;\r\n            },\r\n          });\r\n\r\n          let group = new LayerGroup({layers: [ vtLayer, clusters ]});\r\n\r\n          let oldVis = group.setVisible;\r\n          let oldOpac = group.setOpacity;\r\n\r\n          group.setVisible = function(vis) {\r\n            console.log(\"Setting visibility of group\", vis, this);\r\n            oldVis.call(group, vis);\r\n            this.getLayers().getArray().forEach(layer => {\r\n              layer.setVisible(vis);\r\n            });\r\n          };\r\n\r\n          group.setOpacity = function(opac) {\r\n            console.log(\"Setting opacity on group\", opac, this);\r\n            oldOpac.call(group, opac);\r\n            this.getLayers().getArray().forEach(layer => {\r\n              layer.setOpacity(opac);\r\n            });\r\n          };\r\n\r\n\r\n          vtLayer = group;\r\n        }\r\n\r\n        return vtLayer;\r\n      });\r\n\r\n    return layers;\r\n}\r\n\r\n/**\r\n * Builder for a single endpoint configuration for MVT layers.\r\n *\r\n * Example usage:\r\n *   const endpoint = new MvtEndpointConfigBuilder()\r\n *     .setUrl('https://example.com/tiles/{z}/{x}/{y}.pbf')\r\n *     .setZIndex(1000)\r\n *     .setTileSize(256)\r\n *     .setHeaders({ Authorization: 'Bearer token' })\r\n *     .build();\r\n */\r\nexport class MvtEndpointConfigBuilder {\r\n  /**\r\n   * @param {Object} [initialEndpoint] - Optional initial endpoint configuration.\r\n   */\r\n  constructor(initialEndpoint = {}) {\r\n    this._endpoint = { ...initialEndpoint };\r\n  }\r\n\r\n  setUrl(url) {\r\n    this._endpoint.url = url;\r\n    return this;\r\n  }\r\n\r\n  setZIndex(zIndex) {\r\n    this._endpoint.zIndex = zIndex;\r\n    return this;\r\n  }\r\n\r\n  setTileSize(tileSize) {\r\n    this._endpoint.tileSize = tileSize;\r\n    return this;\r\n  }\r\n\r\n  setHeaders(headers) {\r\n    this._endpoint.headers = headers;\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    if (!this._endpoint.url || typeof this._endpoint.url !== 'string') {\r\n      throw new Error('Endpoint \"url\" is required and must be a string.');\r\n    }\r\n    if (this._endpoint.zIndex && typeof this._endpoint.zIndex !== 'number') {\r\n      throw new Error('Endpoint \"zIndex\" must be a number if provided.');\r\n    }\r\n    if (this._endpoint.tileSize && typeof this._endpoint.tileSize !== 'number') {\r\n      throw new Error('Endpoint \"tileSize\" must be a number if provided.');\r\n    }\r\n    if (this._endpoint.headers && typeof this._endpoint.headers !== 'object') {\r\n      throw new Error('Endpoint \"headers\" must be an object if provided.');\r\n    }\r\n    return { ...this._endpoint };\r\n  }\r\n}\r\n\r\n/**\r\n * Builder for the MVT configuration object.\r\n *\r\n * Example usage:\r\n *   const config = new MvtConfigBuilder()\r\n *     .setKey('myLayerGroup')\r\n *     .setDeclutter(true)\r\n *     .setCluster({ enabled: true, distance: 40, minDistance: 20 })\r\n *     .addEndpoint(endpointConfig)\r\n *     .build();\r\n */\r\nexport class MvtConfigBuilder {\r\n  /**\r\n   * @param {Object} [initialConfig] - Optional initial configuration object.\r\n   */\r\n  constructor(initialConfig = {}) {\r\n    this._config = {\r\n      config: {\r\n        value: {\r\n          endpoints: [],\r\n          ...(initialConfig.config && initialConfig.config.value ? initialConfig.config.value : {})\r\n        },\r\n      },\r\n      key: initialConfig.key || '',\r\n    };\r\n\r\n    if (\r\n      initialConfig.config &&\r\n      initialConfig.config.value &&\r\n      Array.isArray(initialConfig.config.value.endpoints)\r\n    ) {\r\n      this._config.config.value.endpoints = [...initialConfig.config.value.endpoints];\r\n    }\r\n  }\r\n\r\n  setKey(key) {\r\n    this._config.key = key;\r\n    return this;\r\n  }\r\n\r\n  setDeclutter(declutter) {\r\n    this._config.config.value.declutter = !!declutter;\r\n    return this;\r\n  }\r\n\r\n  setCluster(clusterConfig) {\r\n    this._config.config.value.cluster = clusterConfig;\r\n    return this;\r\n  }\r\n\r\n  addEndpoint(endpoint) {\r\n    if (!endpoint || typeof endpoint !== 'object') {\r\n      throw new Error('Endpoint must be an object.');\r\n    }\r\n    this._config.config.value.endpoints.push(endpoint);\r\n    return this;\r\n  }\r\n\r\n  build() {\r\n    return this._config;\r\n  }\r\n}"],"names":["source","vtLayer","endpoint","core","LayerGroup"],"mappings":"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"}