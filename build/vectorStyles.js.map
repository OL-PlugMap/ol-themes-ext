{"version":3,"file":"vectorStyles.js","sources":["../src/vectorStyles.js"],"sourcesContent":["import FillPattern from 'ol-ext/style/FillPattern';\r\nimport { Style, Fill, Stroke, Circle as CircleStyle, Text } from 'ol/style';\r\nimport { _checkFilter } from './filterEngine'\r\n\r\n\r\nimport { getLogger } from './logger'\r\n\r\nconst unstyledConf = {\r\n      fill: new Fill({\r\n        color: \"rgba(255,255,255,0.5)\"\r\n      }),\r\n      stroke: new Stroke({\r\n        color: \"rgba(0,0,0,0.75)\",\r\n        width: 4\r\n      }),\r\n    };\r\n\r\nconst unstyled = new Style(unstyledConf);\r\n\r\n/**\r\n   * Determines whether a given feature should be rendered based on various filter conditions.\r\n   *\r\n   * @param {Object} source - The source object containing filter settings.\r\n   * @param {ol.Feature} feature - The OpenLayers feature to evaluate for rendering.\r\n   * @returns {boolean} True if the feature should be rendered, otherwise false.\r\n   */\r\nconst  featureShouldBeRendered = (source, feature) => {\r\n    var renderFeature = true;\r\n    var fev = feature.get(\"FilterEngine\");\r\n    var r = true;\r\n\r\n    if (fev && fev.renderFn) {\r\n      fev.renderFn();\r\n      r = fev.render;\r\n    }\r\n\r\n    //Apparently webpack didnt take too kindly to ?. so I rewrote this to play nicer with it for now ...\r\n    getLogger()(\"Check feature render\", source, feature)\r\n    if (source.filterSet && source.filterSet.mode && source.filterSet.mode != \"NONE\") {\r\n      let isRenderable = _checkFilter(source, feature);\r\n      getLogger()(isRenderable);\r\n      r = isRenderable;\r\n    }\r\n\r\n    renderFeature = feature.get(\"selected\") || r;\r\n\r\n    return renderFeature;\r\n  }\r\n\r\nclass ConfigurableStyleEngine {\r\n  constructor() {\r\n\r\n    this.highlightStyleConf = {\r\n      fill: new Fill({ color: \"rgba(255,255,100,0.7)\" }),\r\n      stroke: new Stroke({ color: \"rgba(255,255,0,1)\", width: 1 }),\r\n      image: new CircleStyle({ radius: 10, stroke: new Stroke({ color: '#fff', }), fill: new Fill({ color: '#3399CC', }), }),\r\n      zIndex: 999\r\n    };\r\n    this.invisibleStyleConf = {\r\n      fill: new Fill({ color: \"rgba(255,255,255,0.0)\" }),\r\n      stroke: new Stroke({ color: \"rgba(255,255,255,0.0)\", width: 1 }),\r\n    }\r\n\r\n    this.highlightStyle = new Style(this.highlightStyleConf);\r\n\r\n\r\n    this.invisibleStyle = new Style(this.invisibleStyleConf);\r\n\r\n    this.selectedStyleConf = {\r\n      fill: new Fill({\r\n        color: \"rgba(255,255,100,0.7)\"\r\n      }),\r\n      stroke: new Stroke({\r\n        color: \"rgba(255,255,0,1)\",\r\n        width: 1\r\n      }),\r\n    }\r\n\r\n    this.selectedStyle = new Style(this.selectedStyleConf);\r\n\r\n    this.unstyledConf = {\r\n      fill: new Fill({\r\n        color: \"rgba(255,255,255,0.5)\"\r\n      }),\r\n      stroke: new Stroke({\r\n        color: \"rgba(0,0,0,0.75)\",\r\n        width: 4\r\n      }),\r\n    };\r\n\r\n    this.unstyled = new Style(this.unstyledConf);\r\n  }\r\n\r\n  /**\r\n   * Creates a FillPattern instance based on the provided style object.\r\n   *\r\n   * @param {Object} style - The style object containing pattern options.\r\n   * @param {Object} style.pattern - The pattern options for FillPattern.\r\n   * @param {string} style.strokeColor - The color to use for the pattern's stroke.\r\n   * @param {string} style.fillColor - The color to use for the pattern's fill.\r\n   * @returns {FillPattern} The generated FillPattern instance.\r\n   */\r\n  pattern(style) {\r\n    let opts = style.pattern;\r\n    opts.color = style.strokeColor\r\n    opts.fill = new Fill({ color: style.fillColor });\r\n    return new FillPattern(opts);\r\n  };\r\n\r\n  /**\r\n   * Determines if a given feature is highlighted in the specified source.\r\n   *\r\n   * @param {Object} source - The source object containing highlighted features.\r\n   * @param {ol.Feature} feature - The OpenLayers feature to check.\r\n   * @returns {boolean} True if the feature is highlighted; otherwise, false.\r\n   */\r\n  featureIsHighlighted (source, feature) {\r\n    return source.highlightFeats[feature.getId()];\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Generates a dynamic style function for vector features based on endpoint and source configuration.\r\n   *\r\n   * @param {Object} endpoint - The endpoint configuration object, expected to contain style information.\r\n   * @param {Object} source - The source object used for feature highlighting and rendering logic.\r\n   * @returns {function} A function that takes an OpenLayers feature and returns an appropriate style instance.\r\n   *\r\n   * The returned function applies the following logic:\r\n   * - Returns a highlight style if the feature is highlighted.\r\n   * - Checks if the feature should be rendered; if not, returns an invisible style.\r\n   * - Returns a selected style if the feature is marked as selected.\r\n   * - If the feature has the specified dynamic field, applies a style from the dynamic map.\r\n   * - Returns an invisible style if no matching style is found in the map.\r\n   * - Returns an unstyled style as a fallback.\r\n   */\r\n  dynamicStyling (endpoint, source) {\r\n\r\n    let that = this;\r\n\r\n    return function (feature) {\r\n      let styleConf = {};\r\n\r\n      if (that.featureIsHighlighted(source, feature)) {\r\n        return that.highlightStyle;\r\n      }\r\n\r\n      var renderFeature = featureShouldBeRendered(source, feature);\r\n\r\n\r\n      let map = endpoint.style.dynamic.map;\r\n      let field = endpoint.style.dynamic.field;\r\n\r\n      if (!renderFeature) {\r\n        return that.invisibleStyle;\r\n      } else if (feature.get(\"selected\")) {\r\n        return selectedStyle;\r\n      } else if (feature && ((feature.properties_ && feature.properties_[field]) || feature.get && feature.get(field))) {\r\n        var val = feature.properties_ ? feature.properties_[field] + \"\" : feature.get(field) + \"\";\r\n        if (map[val]) {\r\n          var style = map[val];\r\n\r\n          let styleConf = that.convertToStyleConf(style);\r\n\r\n          return new Style(styleConf);\r\n        }\r\n        else {\r\n          return that.invisibleStyle;\r\n        }\r\n      }\r\n      else {\r\n        return that.unstyled;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a style configuration object into an OpenLayers style configuration.\r\n   *\r\n   * @param {Object} style - The style configuration object.\r\n   * @param {Object} [style.pattern] - Optional pattern fill configuration.\r\n   * @param {string} [style.fillColor] - Fill color in CSS color format (e.g., \"rgba(255,0,0,0.5)\").\r\n   * @param {string} [style.strokeColor] - Stroke color in CSS color format.\r\n   * @param {number} [style.strokeWidth=4] - Stroke width in pixels.\r\n   * @param {Object} [style.image] - Image style configuration.\r\n   * @param {string} [style.image.type] - Type of image (\"circle\" or \"icon\").\r\n   * @param {number} [style.image.radius=10] - Radius for circle image.\r\n   * @param {string} [style.image.strokeColor='#fff'] - Stroke color for circle image.\r\n   * @param {string} [style.image.fillColor='#3399CC'] - Fill color for circle image.\r\n   * @param {string} [style.image.src] - Source URL for icon image.\r\n   * @param {Array<number>} [style.image.anchor=[0.5, 0.5]] - Anchor for icon image.\r\n   * @param {string} [style.image.anchorXUnits='fraction'] - X anchor units for icon image.\r\n   * @param {string} [style.image.anchorYUnits='fraction'] - Y anchor units for icon image.\r\n   * @param {number} [style.image.scale=1] - Scale for icon image.\r\n   * @param {number} [style.image.rotation=0] - Rotation for icon image in radians.\r\n   * @param {number} [style.image.opacity=1] - Opacity for icon image.\r\n   * @param {string} [style.image.color='#000'] - Color for icon image.\r\n   * @param {string} [style.image.crossOrigin='anonymous'] - Cross-origin setting for icon image.\r\n   * @param {Object} [style.text] - Text style configuration.\r\n   * @param {string} [style.text.static] - Static text to display.\r\n   * @param {string} [style.text.font='12px Calibri,sans-serif'] - Font for text.\r\n   * @param {string} [style.text.fillColor='#fff'] - Fill color for text.\r\n   * @returns {Object} styleConf - The OpenLayers style configuration object.\r\n   */\r\n  convertToStyleConf (style) {\r\n    let styleConf = {};\r\n\r\n    if (style.pattern) {\r\n      styleConf.fill = pattern(style);\r\n    } else if (style.fillColor) {\r\n      styleConf.fill = new Fill({ color: style.fillColor || \"rgba(255,0,0,0.5)\" });\r\n    }\r\n    else {\r\n      styleConf.fill = new Fill({ color: \"rgba(255,255,255,0)\" });\r\n    }\r\n\r\n    if (style.strokeColor) {\r\n      styleConf.stroke = new Stroke({\r\n        color: style.strokeColor || \"rgba(255,0,255,0.75)\",\r\n        width: style.strokeWidth != undefined ? style.strokeWidth : 4\r\n      });\r\n    }\r\n\r\n    if (style.image) {\r\n      if (style.image.type == \"circle\") {\r\n        styleConf.image = new CircleStyle({\r\n          radius: style.image.radius != undefined ? style.image.radius : 10,\r\n          stroke: new Stroke({\r\n            color: style.image.strokeColor || '#fff',\r\n          }),\r\n          fill: new Fill({\r\n            color: style.image.fillColor || '#3399CC',\r\n          })\r\n        });\r\n      }\r\n      else if (style.image.type == \"icon\") {\r\n        styleConf.image = new Icon({\r\n          src: style.image.src || '',\r\n          anchor: style.image.anchor || [0.5, 0.5],\r\n          anchorXUnits: style.image.anchorXUnits || 'fraction',\r\n          anchorYUnits: style.image.anchorYUnits || 'fraction',\r\n          scale: style.image.scale || 1,\r\n          rotation: style.image.rotation || 0,\r\n          opacity: style.image.opacity || 1,\r\n          color: style.image.color || '#000',\r\n          crossOrigin: style.image.crossOrigin || 'anonymous'\r\n        });\r\n      }\r\n    }\r\n\r\n    if (style.text) {\r\n      if (style.text.static) {\r\n        styleConf.text = new Text({ text: style.text.static, font: style.text.font || '12px Calibri,sans-serif', fill: new Fill({ color: style.text.fillColor || '#fff', }) });\r\n      }\r\n    }\r\n\r\n    styleConf.src = \"ol-themes-ext\";\r\n\r\n    return styleConf;\r\n  }\r\n\r\n  /**\r\n   * Generates a style function for vector features with static styling and dynamic text labels.\r\n   *\r\n   * This method creates and returns a function that can be used as an OpenLayers style function.\r\n   * The returned function applies a static style to features, but dynamically sets the text label\r\n   * based on a property of each feature. It also supports highlighting features and customizes\r\n   * text appearance such as font, fill, stroke, and padding.\r\n   *\r\n   * @param {string} endpoint - The endpoint associated with the vector source.\r\n   * @param {Object} source - The vector source object containing features and highlight information.\r\n   * @param {Object} styleConf - The style configuration object to be used or updated.\r\n   * @param {Object} style - The style definition object, including text and highlight options.\r\n   * @returns {function} A style function that takes an OpenLayers feature and returns an OpenLayers Style instance.\r\n   */\r\n  staticStylingWithDynamicTextLabels (endpoint, source, styleConf, style) {\r\n    let that = this;\r\n    this.style = style;\r\n    this.styleConf = styleConf;\r\n    this.source = source;\r\n    this.endpoint = endpoint;\r\n\r\n    return function (feature) {\r\n      if (!that.styleConf) {\r\n        that.styleConf = that.convertToStyleConf(that.style);\r\n      }\r\n\r\n      var val = \"\";\r\n      if (feature.properties_ && feature.properties_[that.style.text.dynamic])\r\n        val = feature.properties_[that.style.text.dynamic] + \"\";\r\n\r\n\r\n      let declutterPadding = that.style.text.declutterPadding || 10;\r\n\r\n      let style = that.style;\r\n\r\n      if (that.source.highlightFeats[feature.getId()]) {\r\n        console.log(\"highlighted\", that.style, that.highlightStyle);\r\n        style = that.highlightStyle;\r\n      }\r\n\r\n      that.styleConf.text = new Text({\r\n        overflow: true,\r\n        padding: [declutterPadding, declutterPadding, declutterPadding, declutterPadding],\r\n        text: val,\r\n        font: style.text.font || '12px Calibri,sans-serif',\r\n        fill: new Fill({\r\n          color: style.text.fillColor || '#fff',\r\n        }),\r\n        stroke: new Stroke({\r\n          color: style.text.strokeColor || '#fff',\r\n          width: style.text.strokeWidth != undefined ? style.text.strokeWidth : 1\r\n        }),\r\n        offsetX: style.text.offsetX != undefined ? style.text.offsetX : 0,\r\n        offsetY: style.text.offsetY != undefined ? style.text.offsetY : 0,\r\n      });\r\n\r\n      console.log(\"Returning style\", that.styleConf);\r\n      return new Style(that.styleConf);\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a style function for OpenLayers vector features based on static and highlight styles.\r\n   * Applies a highlight style to features marked as highlighted in the source, otherwise applies the default static style.\r\n   * If the style includes dynamic text labels, delegates to a specialized handler.\r\n   *\r\n   * @param {Object} endpoint - The endpoint configuration object containing style definitions.\r\n   * @param {Object} source - The vector source object, expected to have a `highlightFeats` property mapping feature IDs to highlight status.\r\n   * @returns {function} A style function that takes an OpenLayers feature and returns an OpenLayers Style instance.\r\n   */\r\n  staticStyling (endpoint, source) {\r\n    this.endpoint = endpoint;\r\n    this.source = source;\r\n\r\n    this.style = this.endpoint.style.static;\r\n\r\n    this.highlightStyle = endpoint.style.highlight;\r\n\r\n    this.highlightStyleConf = null;\r\n\r\n    if (this.highlightStyle) {\r\n      console.log(\"highlight style\", this.highlightStyle);\r\n      this.highlightStyleConf = this.convertToStyleConf(this.highlightStyle);\r\n      console.log(\"Converted\", this.highlightStyleConf);\r\n    }\r\n    else {\r\n      console.log(\"no highlight style, using default\");\r\n      this.highlightStyleConf = {};\r\n\r\n      this.highlightStyleConf.fill = new Fill({ color: \"rgba(255,255,100,0.7)\" });\r\n      this.highlightStyleConf.stroke = new Stroke({ color: \"rgba(255,255,0,1)\", width: 1 });\r\n      this.highlightStyleConf.image = new CircleStyle({ radius: 10, stroke: new Stroke({ color: '#fff', }), fill: new Fill({ color: '#3399CC', }), });\r\n      this.highlightStyleConf.zIndex = 999;\r\n    }\r\n\r\n    console.log(\"Applying highlight style to endpoint\", this.endpoint, this.highlightStyleConf);\r\n    this.endpoint.highlightStyle = this.highlightStyleConf;\r\n\r\n\r\n\r\n    this.styleConf = this.convertToStyleConf(this.style);\r\n\r\n\r\n    if (this.style.text) {\r\n      if (this.style.text.dynamic) {\r\n        return this.staticStylingWithDynamicTextLabels(this.endpoint, this.source, this.styleConf, this.style);\r\n      }\r\n    }\r\n\r\n    let that = this;\r\n\r\n    return function (feature) {\r\n      if (that.source.highlightFeats[feature.getId()]) {\r\n        console.log(\"highlight style\", that.highlightStyleConf, feature, that.endpoint, that.source);\r\n        console.log(\"Returning highlight style\");\r\n        return new Style(that.highlightStyleConf);\r\n      }\r\n      console.log(\"Returning style\");\r\n      return new Style(that.styleConf);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies a vector style from a remote endpoint to the current layer.\r\n   *\r\n   * Fetches a style JSON from the provided endpoint, validates that all specified layers\r\n   * share the same vector source, normalizes sprite and glyph URLs if present, and applies\r\n   * the style to the layer. Handles errors for missing sources, mismatched sources, and\r\n   * non-vector sources. Sets the source state to \"ready\" upon successful application.\r\n   *\r\n   * @param {Object} endpoint - The endpoint object containing the style URL.\r\n   * @param {Object} source - The source object associated with the layer.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  urlStyling (endpoint, source) {\r\n    let that = layer;\r\n    that.handleError = function (err) { console.error(err); };\r\n    let SourceType = { VECTOR: \"vector\" }\r\n    fetch(endpoint.style.url).then(resp => {\r\n      if (resp.ok)\r\n        return resp.json();\r\n      throw new Error(`Unexpected error: ${resp.status}`)\r\n    }).then((style) => {\r\n      let sourceId;\r\n      let sourceIdOrLayersList;\r\n      if (that.layers) {\r\n        // confirm all layers share the same source\r\n        const lookup = {};\r\n        for (let i = 0; i < style.layers.length; ++i) {\r\n          const layer = style.layers[i];\r\n          if (layer.source) {\r\n            lookup[layer.id] = layer.source;\r\n          }\r\n        }\r\n        let firstSource;\r\n        for (let i = 0; i < that.layers.length; ++i) {\r\n          const candidate = lookup[that.layers[i]];\r\n          if (!candidate) {\r\n            that.handleError(\r\n              new Error(`could not find source for ${that.layers[i]}`)\r\n            );\r\n            return;\r\n          }\r\n          if (!firstSource) {\r\n            firstSource = candidate;\r\n          } else if (firstSource !== candidate) {\r\n            that.handleError(\r\n              new Error(\r\n                `layers can only use a single source, found ${firstSource} and ${candidate}`\r\n              )\r\n            );\r\n            return;\r\n          }\r\n        }\r\n        sourceId = firstSource;\r\n        sourceIdOrLayersList = that.layers;\r\n      } else {\r\n        sourceId = that.sourceId;\r\n        sourceIdOrLayersList = sourceId;\r\n      }\r\n\r\n      if (!sourceIdOrLayersList) {\r\n        // default to the first source in the style\r\n        sourceId = Object.keys(style.sources)[0];\r\n        sourceIdOrLayersList = sourceId;\r\n      }\r\n\r\n      if (style.sprite) {\r\n        style.sprite = normalizeSpriteUrl(style.sprite, that.accessToken, endpoint.style.url);\r\n      }\r\n\r\n      if (style.glyphs) {\r\n        style.glyphs = normalizeGlyphsUrl(style.glyphs, that.accessToken, endpoint.style.url);\r\n      }\r\n\r\n      const styleSource = style.sources[sourceId];\r\n      let SourceType = { VECTOR: \"vector\" }\r\n      let SourceState = { READY: \"ready\" }\r\n      if (styleSource.type !== \"vector\") {\r\n        that.handleError(\r\n          new Error(`only works for vector sources, found ${styleSource.type}`)\r\n        );\r\n        return;\r\n      }\r\n\r\n      const source = that.getSource();\r\n\r\n      applyStyle(that, style, sourceIdOrLayersList)\r\n        .then(() => {\r\n          source.setState(SourceState.READY);\r\n        })\r\n        .catch((error) => {\r\n          that.handleError(error);\r\n        });\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport class ConfigurableStyle {\r\n\r\n  constructor(endpoint, source, layer) {\r\n\r\n    this.endpoint = endpoint;\r\n\r\n    this.getStyle = () => { console.log(\"Error parsing style\") };\r\n\r\n    if (endpoint.style) {\r\n      let configurableStyleEngine = new ConfigurableStyleEngine();\r\n\r\n      if (endpoint.style.url) {\r\n        this.getStyle = configurableStyleEngine.urlStyling(endpoint, source);\r\n      }\r\n      else if (endpoint.style.dynamic) {\r\n        this.getStyle = configurableStyleEngine.dynamicStyling(endpoint, source);\r\n      }\r\n      else if (endpoint.style.static) {\r\n        this.getStyle = configurableStyleEngine.staticStyling(endpoint, source);\r\n      }\r\n    }\r\n    else {\r\n      this.getStyle = configurableStyleEngine.unstyled;\r\n    }\r\n  }\r\n}\r\n\r\nexport const _styleFunction = (endpoint, source, layer) => {\r\n  let style = new ConfigurableStyle(endpoint, source, layer);\r\n  return style.getStyle;\r\n}"],"names":["CircleStyle","styleConf","style","layer","source","configurableStyleEngine"],"mappings":"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"}